commit_sha,id,number,state,body,title,created_at,updated_at,closed_at,merged_at,draft
976b536446a77de8de2d5559c78f612970fb5e37,1653778060,748,closed,"## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [x] Bug Fix
- [ ] Optimization
- [ ] Documentation Update
- [ ] Go Version Update
- [ ] Dependency Update

## Description
Fix made in #712 is not an optimal solution to the problem #704, since it completely prevents the possibility of getting error `ErrMethodMismatch` for subrouters.

The proposed solution corrects this situation and allows correct error handling of invalid query paramaters and preserves the possibility of getting `ErrMethodMismatch` in subrouters.

## Related Tickets & Documents

- Related Issue #739
- Closes #739

## Added/updated tests?

- [x] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [x] `make verify` is passing
- [x] `make test` is passing",[BUG #739] Fixed handling of invalid query params,2023-12-21 13:41:04+00:00,2024-01-22 04:09:27+00:00,2024-01-22 04:09:27+00:00,2024-01-22 04:09:27+00:00,False
e44017df2b8798f6bfff81fff1c0b319c1a54496,1019117412,691,closed,"**Summary of Changes**

Hello!

I found a few ""low hanging"" allocations that can be deferred until needed or
 even skipped entirely.

With all the optimizations combined, we can see the best improvement for
 simple, static routes (like a `/status` endpoint) that do not read the `Route`
 from the request context via `CurrentRoute` and do not populate any vars.
On these routes, we can process requests with a single allocation for the
 `RouteMatch` object. Previously there were 9 extra allocations.
For said routes the processing overhead (ns/op) in mux dropped by 75%, which is
 a speedup of 4x.

Other routes can expect to see a double-digit percentage reduction in both
 processing overhead (ns/op) and allocations as well.
These are driven by merging the context population into a single operation,
 eliminating two of ten allocations.

(Eliminating that last allocation for the `RouteMatch` in the best case
 requires significant refactoring to maintain full backwards compatibility.
 Something for another day.)

Each commit message contains benchmark results for showcasing particular
 (micro) optimizations in reduced allocations and in a few cases notable direct
 CPU time savings.

I also ran longer benchmarks with 100 repetitions in multiple settings on
 different generations of (server) CPUs.
First, there is the full set of benchmarks in this repository and second, the
 popular benchmarks https://github.com/julienschmidt/go-http-routing-benchmark.

All but the last change are entirely ""free"", as in they do not cut features for
 gains in performance. The last change for omitting the `Route` from the
context is behind an optional flag that users can opt in when they do not read
 the `Route` from the request context.
Said flag is stored local in a `Router`, so users can enable/disable the flag
 on Subrouters individually.

<details>
<summary> Benchmark results </summary>

I added all the new benchmarks onto a `baseline` branch for comparing the
 performance of the changes, tip is 0eba4f5731f329d9a95b67359e795344343a6119.

I'm running these tests on ""shared"" compute instances (and my Laptop), so
 expect some noise (and frequency scaling on the i7).

<details>
<summary> mux project benchmarks </summary>

You can reproduce these benchmarks using docker, pinned to CPU 1:

```bash
docker run --rm --pull always -v /logs:/logs --cpuset-cpus 1 -d golang:1.18 bash -exc 'git clone https://github.com/das7pad/mux.git && cd mux && for branch in baseline perf-cut-allocations; do git checkout ""$branch"" && go test -benchmem -bench . -count 100 -timeout 1h > ""/logs/$branch-all.txt""; done; go install golang.org/x/perf/cmd/benchstat@latest; benchstat /logs/baseline-all.txt /logs/perf-cut-allocations-all.txt > /logs/compare-all.txt'
```

<details>
<summary> Modern Xeon E, 3.4 GHz </summary>

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) E-2278G CPU @ 3.40GHz

name                                 old time/op    new time/op    delta
Mux                                    1.09µs ± 5%    0.96µs ± 6%  -12.33%  (p=0.000 n=90+90)
MuxSimple/default                       654ns ± 5%     333ns ± 4%  -49.06%  (p=0.000 n=90+94)
MuxSimple/omit_route_from_ctx           655ns ± 5%     146ns ± 3%  -77.78%  (p=0.000 n=93+95)
MuxAlternativeInRegexp                 1.58µs ± 5%    1.30µs ± 3%  -17.75%  (p=0.000 n=92+90)
ManyPathVariables                      1.82µs ± 6%    1.65µs ± 5%   -9.73%  (p=0.000 n=94+93)
PopulateContext/no_populated_vars       665ns ± 5%     339ns ± 5%  -48.97%  (p=0.000 n=95+96)
PopulateContext/empty_var               910ns ± 5%     763ns ± 6%  -16.16%  (p=0.000 n=84+87)
PopulateContext/populated_vars          974ns ±10%     807ns ± 7%  -17.13%  (p=0.000 n=96+89)
PopulateContext/omit_route_/static      664ns ± 5%     148ns ± 3%  -77.66%  (p=0.000 n=94+89)
PopulateContext/omit_route_/dynamic     915ns ± 6%     741ns ± 6%  -18.98%  (p=0.000 n=90+94)
_findQueryKey/0                         158ns ± 2%     146ns ± 2%   -7.07%  (p=0.000 n=91+88)
_findQueryKey/1                         198ns ± 4%     196ns ± 5%   -0.56%  (p=0.001 n=92+95)
_findQueryKey/2                         710ns ± 4%     705ns ± 4%   -0.80%  (p=0.000 n=94+94)
_findQueryKey/3                         804ns ± 4%     798ns ± 5%   -0.82%  (p=0.000 n=90+94)
_findQueryKey/4                        3.85ns ± 2%    3.85ns ± 3%     ~     (p=0.224 n=89+93)
_findQueryKeyGoLib/0                    664ns ± 4%     668ns ± 5%   +0.67%  (p=0.030 n=97+94)
_findQueryKeyGoLib/1                    359ns ± 6%     359ns ± 6%     ~     (p=0.830 n=94+93)
_findQueryKeyGoLib/2                   2.24µs ± 3%    2.23µs ± 4%   -0.37%  (p=0.041 n=95+93)
_findQueryKeyGoLib/3                   2.94µs ± 4%    2.92µs ± 3%   -0.68%  (p=0.001 n=90+94)
_findQueryKeyGoLib/4                   3.63ns ± 4%    3.62ns ± 3%   -0.38%  (p=0.014 n=91+88)

name                                 old alloc/op   new alloc/op   delta
Mux                                    1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
MuxSimple/default                      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx          1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                 2.62kB ± 0%    1.82kB ± 0%  -30.49%  (p=0.000 n=100+100)
ManyPathVariables                      1.53kB ± 1%    1.13kB ± 0%  -26.45%  (p=0.000 n=99+93)
PopulateContext/no_populated_vars      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
PopulateContext/empty_var              1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
PopulateContext/populated_vars         1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
_findQueryKey/0                         0.00B          0.00B          ~     (all equal)
_findQueryKey/1                         40.0B ± 0%     40.0B ± 0%     ~     (all equal)
_findQueryKey/2                          483B ± 0%      483B ± 0%     ~     (all equal)
_findQueryKey/3                          543B ± 0%      543B ± 0%     ~     (all equal)
_findQueryKey/4                         0.00B          0.00B          ~     (all equal)
_findQueryKeyGoLib/0                     864B ± 0%      864B ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     432B ± 0%      432B ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                   1.54kB ± 0%    1.54kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                   1.98kB ± 0%    1.98kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                    0.00B          0.00B          ~     (all equal)

name                                 old allocs/op  new allocs/op  delta
Mux                                      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
MuxSimple/default                        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx            9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                   20.0 ± 0%      16.0 ± 0%  -20.00%  (p=0.000 n=100+100)
ManyPathVariables                        14.0 ± 0%      12.0 ± 0%  -14.29%  (p=0.000 n=100+100)
PopulateContext/no_populated_vars        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
PopulateContext/empty_var                11.0 ± 0%       9.0 ± 0%  -18.18%  (p=0.000 n=100+100)
PopulateContext/populated_vars           10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic      11.0 ± 0%       8.0 ± 0%  -27.27%  (p=0.000 n=100+100)
_findQueryKey/0                          0.00           0.00          ~     (all equal)
_findQueryKey/1                          3.00 ± 0%      3.00 ± 0%     ~     (all equal)
_findQueryKey/2                          10.0 ± 0%      10.0 ± 0%     ~     (all equal)
_findQueryKey/3                          11.0 ± 0%      11.0 ± 0%     ~     (all equal)
_findQueryKey/4                          0.00           0.00          ~     (all equal)
_findQueryKeyGoLib/0                     8.00 ± 0%      8.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     4.00 ± 0%      4.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                     24.0 ± 0%      24.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                     28.0 ± 0%      28.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                     0.00           0.00          ~     (all equal)
```

---

</details>

<details>
<summary> Older Xeon Gold, 2.3 GHz </summary>

(Actual CPU identifier is rather `Intel(R) Xeon(R) Gold 5122 CPU @ 2.30GHz`)
```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel Xeon Processor (Skylake, IBRS) 

name                                 old time/op    new time/op    delta
Mux                                    1.61µs ± 6%    1.43µs ± 6%  -11.38%  (p=0.000 n=97+96)
MuxSimple/default                       979ns ± 8%     508ns ± 7%  -48.15%  (p=0.000 n=93+98)
MuxSimple/omit_route_from_ctx          1.00µs ±12%    0.22µs ± 4%  -77.76%  (p=0.000 n=99+96)
MuxAlternativeInRegexp                 2.40µs ± 9%    2.03µs ±12%  -15.15%  (p=0.000 n=94+98)
ManyPathVariables                      2.77µs ± 8%    2.60µs ±12%   -6.17%  (p=0.000 n=94+99)
PopulateContext/no_populated_vars      1.03µs ±11%    0.54µs ±13%  -47.57%  (p=0.000 n=94+98)
PopulateContext/empty_var              1.35µs ± 6%    1.23µs ±11%   -9.01%  (p=0.000 n=95+96)
PopulateContext/populated_vars         1.40µs ± 8%    1.30µs ±14%   -6.98%  (p=0.000 n=97+99)
PopulateContext/omit_route_/static      989ns ± 7%     239ns ±10%  -75.78%  (p=0.000 n=99+99)
PopulateContext/omit_route_/dynamic    1.34µs ± 7%    1.21µs ±15%  -10.04%  (p=0.000 n=95+99)
_findQueryKey/0                         242ns ± 8%     228ns ± 8%   -6.00%  (p=0.000 n=97+95)
_findQueryKey/1                         304ns ± 7%     309ns ± 9%   +1.60%  (p=0.002 n=97+97)
_findQueryKey/2                        1.08µs ± 8%    1.14µs ±10%   +5.28%  (p=0.000 n=99+97)
_findQueryKey/3                        1.20µs ± 6%    1.23µs ± 9%   +2.03%  (p=0.000 n=92+99)
_findQueryKey/4                        5.86ns ± 4%    5.89ns ± 5%   +0.56%  (p=0.041 n=93+96)
_findQueryKeyGoLib/0                    992ns ± 7%    1067ns ±11%   +7.59%  (p=0.000 n=94+98)
_findQueryKeyGoLib/1                    528ns ± 6%     571ns ±11%   +8.04%  (p=0.000 n=97+100)
_findQueryKeyGoLib/2                   3.46µs ± 6%    3.60µs ±10%   +4.18%  (p=0.000 n=96+95)
_findQueryKeyGoLib/3                   4.54µs ± 6%    4.75µs ±11%   +4.62%  (p=0.000 n=92+98)
_findQueryKeyGoLib/4                   5.50ns ± 4%    5.62ns ± 7%   +2.14%  (p=0.000 n=91+96)

name                                 old alloc/op   new alloc/op   delta
Mux                                    1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
MuxSimple/default                      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx          1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                 2.62kB ± 0%    1.82kB ± 0%  -30.49%  (p=0.000 n=100+100)
ManyPathVariables                      1.52kB ± 0%    1.12kB ± 0%  -26.50%  (p=0.000 n=92+97)
PopulateContext/no_populated_vars      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
PopulateContext/empty_var              1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
PopulateContext/populated_vars         1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
_findQueryKey/0                         0.00B          0.00B          ~     (all equal)
_findQueryKey/1                         40.0B ± 0%     40.0B ± 0%     ~     (all equal)
_findQueryKey/2                          483B ± 0%      483B ± 0%     ~     (all equal)
_findQueryKey/3                          543B ± 0%      543B ± 0%     ~     (all equal)
_findQueryKey/4                         0.00B          0.00B          ~     (all equal)
_findQueryKeyGoLib/0                     864B ± 0%      864B ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     432B ± 0%      432B ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                   1.54kB ± 0%    1.54kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                   1.98kB ± 0%    1.98kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                    0.00B          0.00B          ~     (all equal)

name                                 old allocs/op  new allocs/op  delta
Mux                                      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
MuxSimple/default                        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx            9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                   20.0 ± 0%      16.0 ± 0%  -20.00%  (p=0.000 n=100+100)
ManyPathVariables                        14.0 ± 0%      12.0 ± 0%  -14.29%  (p=0.000 n=100+100)
PopulateContext/no_populated_vars        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
PopulateContext/empty_var                11.0 ± 0%       9.0 ± 0%  -18.18%  (p=0.000 n=100+100)
PopulateContext/populated_vars           10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic      11.0 ± 0%       8.0 ± 0%  -27.27%  (p=0.000 n=100+100)
_findQueryKey/0                          0.00           0.00          ~     (all equal)
_findQueryKey/1                          3.00 ± 0%      3.00 ± 0%     ~     (all equal)
_findQueryKey/2                          10.0 ± 0%      10.0 ± 0%     ~     (all equal)
_findQueryKey/3                          11.0 ± 0%      11.0 ± 0%     ~     (all equal)
_findQueryKey/4                          0.00           0.00          ~     (all equal)
_findQueryKeyGoLib/0                     8.00 ± 0%      8.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     4.00 ± 0%      4.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                     24.0 ± 0%      24.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                     28.0 ± 0%      28.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                     0.00           0.00          ~     (all equal)
```

---

</details>

<details>
<summary> Older Xeon E, 2.4 GHz </summary>

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz

name                                 old time/op    new time/op    delta
Mux                                    1.81µs ±13%    1.57µs ±10%  -13.50%  (p=0.000 n=99+97)
MuxSimple/default                      1.09µs ± 8%    0.55µs ±10%  -49.51%  (p=0.000 n=96+95)
MuxSimple/omit_route_from_ctx          1.08µs ±10%    0.25µs ± 8%  -76.66%  (p=0.000 n=95+94)
MuxAlternativeInRegexp                 2.59µs ±12%    2.14µs ±13%  -17.06%  (p=0.000 n=95+92)
ManyPathVariables                      3.11µs ± 9%    2.78µs ±10%  -10.62%  (p=0.000 n=96+99)
PopulateContext/no_populated_vars      1.09µs ± 9%    0.56µs ± 7%  -48.63%  (p=0.000 n=94+93)
PopulateContext/empty_var              1.48µs ± 9%    1.28µs ±12%  -13.52%  (p=0.000 n=97+96)
PopulateContext/populated_vars         1.56µs ±11%    1.34µs ±10%  -13.84%  (p=0.000 n=96+97)
PopulateContext/omit_route_/static     1.08µs ± 9%    0.26µs ± 9%  -75.89%  (p=0.000 n=98+97)
PopulateContext/omit_route_/dynamic    1.50µs ±11%    1.20µs ± 9%  -19.96%  (p=0.000 n=94+93)
_findQueryKey/0                         254ns ± 8%     243ns ± 8%   -4.44%  (p=0.000 n=96+91)
_findQueryKey/1                         336ns ± 7%     336ns ± 8%     ~     (p=0.920 n=96+95)
_findQueryKey/2                        1.25µs ±12%    1.27µs ±14%   +1.55%  (p=0.043 n=97+98)
_findQueryKey/3                        1.37µs ± 8%    1.38µs ± 9%   +0.97%  (p=0.030 n=97+95)
_findQueryKey/4                        5.93ns ± 6%    5.97ns ± 7%     ~     (p=0.074 n=97+97)
_findQueryKeyGoLib/0                   1.07µs ± 9%    1.13µs ±10%   +4.99%  (p=0.000 n=96+95)
_findQueryKeyGoLib/1                    581ns ± 8%     586ns ± 9%     ~     (p=0.089 n=96+99)
_findQueryKeyGoLib/2                   3.93µs ±12%    3.80µs ±10%   -3.31%  (p=0.000 n=96+91)
_findQueryKeyGoLib/3                   5.18µs ±10%    5.06µs ± 8%   -2.27%  (p=0.000 n=98+99)
_findQueryKeyGoLib/4                   6.52ns ± 6%    6.49ns ± 4%     ~     (p=0.232 n=96+94)

name                                 old alloc/op   new alloc/op   delta
Mux                                    1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
MuxSimple/default                      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx          1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                 2.62kB ± 0%    1.82kB ± 0%  -30.49%  (p=0.000 n=100+100)
ManyPathVariables                      1.52kB ± 0%    1.12kB ± 1%  -26.58%  (p=0.000 n=92+96)
PopulateContext/no_populated_vars      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
PopulateContext/empty_var              1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
PopulateContext/populated_vars         1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
_findQueryKey/0                         0.00B          0.00B          ~     (all equal)
_findQueryKey/1                         40.0B ± 0%     40.0B ± 0%     ~     (all equal)
_findQueryKey/2                          483B ± 0%      483B ± 0%     ~     (all equal)
_findQueryKey/3                          543B ± 0%      543B ± 0%     ~     (all equal)
_findQueryKey/4                         0.00B          0.00B          ~     (all equal)
_findQueryKeyGoLib/0                     864B ± 0%      864B ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     432B ± 0%      432B ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                   1.54kB ± 0%    1.54kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                   1.98kB ± 0%    1.98kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                    0.00B          0.00B          ~     (all equal)

name                                 old allocs/op  new allocs/op  delta
Mux                                      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
MuxSimple/default                        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx            9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                   20.0 ± 0%      16.0 ± 0%  -20.00%  (p=0.000 n=100+100)
ManyPathVariables                        14.0 ± 0%      12.0 ± 0%  -14.29%  (p=0.000 n=100+100)
PopulateContext/no_populated_vars        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
PopulateContext/empty_var                11.0 ± 0%       9.0 ± 0%  -18.18%  (p=0.000 n=100+100)
PopulateContext/populated_vars           10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic      11.0 ± 0%       8.0 ± 0%  -27.27%  (p=0.000 n=100+100)
_findQueryKey/0                          0.00           0.00          ~     (all equal)
_findQueryKey/1                          3.00 ± 0%      3.00 ± 0%     ~     (all equal)
_findQueryKey/2                          10.0 ± 0%      10.0 ± 0%     ~     (all equal)
_findQueryKey/3                          11.0 ± 0%      11.0 ± 0%     ~     (all equal)
_findQueryKey/4                          0.00           0.00          ~     (all equal)
_findQueryKeyGoLib/0                     8.00 ± 0%      8.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     4.00 ± 0%      4.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                     24.0 ± 0%      24.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                     28.0 ± 0%      28.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                     0.00           0.00          ~     (all equal)
```

---

</details>

---

</details>


<details>
<summary> Popular go-http-routing-benchmark </summary>

I pushed three branches for comparison to my fork:
https://github.com/das7pad/go-http-routing-benchmark

- `before`, this is the baseline branch mentioned above
- `after`, this is the PR revision
- `after-omit-route`, like `after` with the `OmitRouteFromContext` flag enabled

You can reproduce these benchmarks using docker, pinned to CPU 1:

```bash
docker run --rm --pull always -v /logs:/logs --cpuset-cpus 1 -d golang:1.18 bash -exc 'git clone https://github.com/das7pad/go-http-routing-benchmark.git && cd go-http-routing-benchmark && for branch in before after after-omit-route; do git checkout ""$branch"" && go test -benchmem -bench Gorilla -count 100 -timeout 1h > ""/logs/$branch.txt""; done; go install golang.org/x/perf/cmd/benchstat@latest; benchstat /logs/before.txt /logs/after.txt > /logs/compare-before-vs-after.txt; benchstat /logs/before.txt /logs/after-omit-route.txt > /logs/compare-before-vs-after-omit-route.txt'
```

<details>
<summary> Modern Xeon E, 3.4 GHz </summary>

Before vs After with omit Route flag enabled

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) E-2278G CPU @ 3.40GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           1.86µs ±13%    1.37µs ± 6%  -26.08%  (p=0.000 n=94+96)
GorillaMux_Param5          2.61µs ± 4%    2.20µs ± 4%  -15.92%  (p=0.000 n=89+95)
GorillaMux_Param20         6.13µs ± 3%    3.98µs ± 4%  -35.07%  (p=0.000 n=90+94)
GorillaMux_ParamWrite      1.87µs ± 5%    1.43µs ± 8%  -23.51%  (p=0.000 n=95+92)
GorillaMux_GithubStatic    3.77µs ± 5%    2.43µs ± 4%  -35.40%  (p=0.000 n=96+96)
GorillaMux_GithubParam     5.68µs ± 6%    5.21µs ± 5%   -8.32%  (p=0.000 n=93+93)
GorillaMux_GithubAll       2.86ms ± 6%    2.71ms ± 4%   -5.44%  (p=0.000 n=99+96)
GorillaMux_GPlusStatic     1.31µs ± 5%    0.21µs ± 4%  -84.29%  (p=0.000 n=92+95)
GorillaMux_GPlusParam      2.37µs ± 3%    1.96µs ± 2%  -17.42%  (p=0.000 n=96+94)
GorillaMux_GPlus2Params    4.43µs ± 3%    3.90µs ± 3%  -11.89%  (p=0.000 n=91+90)
GorillaMux_GPlusAll        37.1µs ± 6%    28.9µs ± 5%  -22.26%  (p=0.000 n=93+92)
GorillaMux_ParseStatic     1.55µs ± 5%    0.42µs ± 4%  -72.78%  (p=0.000 n=95+91)
GorillaMux_ParseParam      1.88µs ± 7%    1.41µs ± 7%  -24.66%  (p=0.000 n=94+93)
GorillaMux_Parse2Params    2.21µs ± 4%    1.74µs ± 6%  -21.16%  (p=0.000 n=94+96)
GorillaMux_ParseAll        71.8µs ± 4%    51.3µs ± 4%  -28.51%  (p=0.000 n=93+94)
GorillaMux_StaticAll        771µs ± 4%     492µs ± 3%  -36.17%  (p=0.000 n=95+90)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.93kB ± 0%  -32.56%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.10kB ± 0%  -39.86%  (p=0.000 n=100+80)
GorillaMux_ParamWrite      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     149kB ± 0%  -42.37%  (p=0.000 n=86+99)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%     9.7kB ± 0%  -41.43%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    14.4kB ± 0%  -53.88%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%       8kB ± 0%  -95.24%  (p=0.000 n=100+100)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       7.0 ± 0%  -41.67%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.21k ± 0%  -39.57%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        79 ± 0%  -38.28%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       122 ± 0%  -51.20%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.16k ± 0%  -88.89%  (p=0.000 n=100+100)
```

Before vs After

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) E-2278G CPU @ 3.40GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           1.86µs ±13%    1.47µs ±11%  -21.05%  (p=0.000 n=94+93)
GorillaMux_Param5          2.61µs ± 4%    2.25µs ± 2%  -13.64%  (p=0.000 n=89+90)
GorillaMux_Param20         6.13µs ± 3%    4.05µs ± 4%  -33.96%  (p=0.000 n=90+91)
GorillaMux_ParamWrite      1.87µs ± 5%    1.47µs ± 4%  -21.03%  (p=0.000 n=95+96)
GorillaMux_GithubStatic    3.77µs ± 5%    3.16µs ± 3%  -16.11%  (p=0.000 n=96+95)
GorillaMux_GithubParam     5.68µs ± 6%    5.31µs ± 6%   -6.57%  (p=0.000 n=93+94)
GorillaMux_GithubAll       2.86ms ± 6%    2.72ms ± 4%   -4.97%  (p=0.000 n=99+95)
GorillaMux_GPlusStatic     1.31µs ± 5%    0.66µs ± 6%  -49.50%  (p=0.000 n=92+95)
GorillaMux_GPlusParam      2.37µs ± 3%    2.04µs ± 4%  -13.87%  (p=0.000 n=96+90)
GorillaMux_GPlus2Params    4.43µs ± 3%    3.98µs ± 5%  -10.21%  (p=0.000 n=91+92)
GorillaMux_GPlusAll        37.1µs ± 6%    30.6µs ± 6%  -17.65%  (p=0.000 n=93+94)
GorillaMux_ParseStatic     1.55µs ± 5%    0.90µs ± 4%  -41.88%  (p=0.000 n=95+91)
GorillaMux_ParseParam      1.88µs ± 7%    1.47µs ± 6%  -21.53%  (p=0.000 n=94+95)
GorillaMux_Parse2Params    2.21µs ± 4%    1.80µs ± 5%  -18.26%  (p=0.000 n=94+90)
GorillaMux_ParseAll        71.8µs ± 4%    57.9µs ± 3%  -19.30%  (p=0.000 n=93+97)
GorillaMux_StaticAll        771µs ± 4%     664µs ± 4%  -13.87%  (p=0.000 n=95+95)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.98kB ± 0%  -29.07%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.14kB ± 0%  -38.48%  (p=0.000 n=100+83)
GorillaMux_ParamWrite      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     173kB ± 0%  -33.02%  (p=0.000 n=86+100)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%    11.1kB ± 0%  -32.82%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    19.6kB ± 0%  -37.02%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%      78kB ± 0%  -50.79%  (p=0.000 n=100+100)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       8.0 ± 0%  -33.33%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.48k ± 0%  -25.78%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        96 ± 0%  -25.00%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       168 ± 0%  -32.80%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.63k ± 0%  -55.56%  (p=0.000 n=100+100)
```

---

</details>


<details>
<summary> Older Xeon Gold, 2.3 GHz </summary>

Before vs After with omit Route flag enabled

(Actual CPU identifier is rather `Intel(R) Xeon(R) Gold 5122 CPU @ 2.30GHz`)
```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel Xeon Processor (Skylake, IBRS)

name                     old time/op    new time/op    delta
GorillaMux_Param           3.02µs ±14%    2.24µs ±12%  -25.60%  (p=0.000 n=100+99)
GorillaMux_Param5          4.20µs ±12%    3.45µs ±10%  -17.84%  (p=0.000 n=95+97)
GorillaMux_Param20         9.86µs ±12%    6.36µs ± 9%  -35.54%  (p=0.000 n=96+93)
GorillaMux_ParamWrite      2.97µs ± 7%    2.21µs ± 5%  -25.40%  (p=0.000 n=96+96)
GorillaMux_GithubStatic    5.82µs ± 6%    3.62µs ± 5%  -37.87%  (p=0.000 n=99+98)
GorillaMux_GithubParam     8.81µs ± 7%    7.90µs ± 5%  -10.37%  (p=0.000 n=97+95)
GorillaMux_GithubAll       3.93ms ± 4%    3.62ms ± 6%   -7.72%  (p=0.000 n=97+99)
GorillaMux_GPlusStatic     2.04µs ± 7%    0.33µs ± 9%  -83.77%  (p=0.000 n=98+99)
GorillaMux_GPlusParam      3.72µs ± 6%    3.14µs ±13%  -15.44%  (p=0.000 n=99+99)
GorillaMux_GPlus2Params    6.89µs ± 8%    6.57µs ± 9%   -4.70%  (p=0.000 n=92+98)
GorillaMux_GPlusAll        56.1µs ± 6%    46.5µs ±11%  -17.14%  (p=0.000 n=95+98)
GorillaMux_ParseStatic     2.43µs ± 6%    0.67µs ±11%  -72.49%  (p=0.000 n=96+99)
GorillaMux_ParseParam      2.91µs ± 8%    2.29µs ±12%  -21.07%  (p=0.000 n=98+97)
GorillaMux_Parse2Params    3.44µs ± 8%    2.84µs ± 8%  -17.53%  (p=0.000 n=98+95)
GorillaMux_ParseAll         111µs ± 5%      80µs ±11%  -27.91%  (p=0.000 n=96+98)
GorillaMux_StaticAll       1.13ms ± 4%    0.71ms ± 5%  -37.32%  (p=0.000 n=97+97)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.93kB ± 0%  -32.56%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.10kB ± 0%  -39.86%  (p=0.000 n=100+79)
GorillaMux_ParamWrite      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     149kB ± 0%  -42.37%  (p=0.000 n=80+96)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%     9.7kB ± 0%  -41.43%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    14.4kB ± 0%  -53.88%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%       8kB ± 0%  -95.24%  (p=0.000 n=100+100)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       7.0 ± 0%  -41.67%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.21k ± 0%  -39.57%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        79 ± 0%  -38.28%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       122 ± 0%  -51.20%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.16k ± 0%  -88.89%  (p=0.000 n=100+100)
```

Before vs After

(Actual CPU identifier is rather `Intel(R) Xeon(R) Gold 5122 CPU @ 2.30GHz`)
```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel Xeon Processor (Skylake, IBRS) 

name                     old time/op    new time/op    delta
GorillaMux_Param           3.02µs ±14%    2.27µs ± 8%  -24.70%  (p=0.000 n=100+98)
GorillaMux_Param5          4.20µs ±12%    3.48µs ± 5%  -17.29%  (p=0.000 n=95+98)
GorillaMux_Param20         9.86µs ±12%    6.41µs ± 6%  -35.05%  (p=0.000 n=96+92)
GorillaMux_ParamWrite      2.97µs ± 7%    2.31µs ± 6%  -22.12%  (p=0.000 n=96+98)
GorillaMux_GithubStatic    5.82µs ± 6%    4.69µs ± 5%  -19.52%  (p=0.000 n=99+96)
GorillaMux_GithubParam     8.81µs ± 7%    7.98µs ± 4%   -9.48%  (p=0.000 n=97+96)
GorillaMux_GithubAll       3.93ms ± 4%    3.64ms ± 5%   -7.18%  (p=0.000 n=97+94)
GorillaMux_GPlusStatic     2.04µs ± 7%    1.05µs ±12%  -48.53%  (p=0.000 n=98+94)
GorillaMux_GPlusParam      3.72µs ± 6%    3.09µs ± 5%  -16.76%  (p=0.000 n=99+96)
GorillaMux_GPlus2Params    6.89µs ± 8%    6.18µs ± 5%  -10.28%  (p=0.000 n=92+95)
GorillaMux_GPlusAll        56.1µs ± 6%    46.0µs ± 5%  -17.98%  (p=0.000 n=95+93)
GorillaMux_ParseStatic     2.43µs ± 6%    1.44µs ± 5%  -40.52%  (p=0.000 n=96+95)
GorillaMux_ParseParam      2.91µs ± 8%    2.30µs ± 5%  -20.93%  (p=0.000 n=98+98)
GorillaMux_Parse2Params    3.44µs ± 8%    2.82µs ± 7%  -18.04%  (p=0.000 n=98+94)
GorillaMux_ParseAll         111µs ± 5%      91µs ±13%  -18.12%  (p=0.000 n=96+98)
GorillaMux_StaticAll       1.13ms ± 4%    0.95ms ± 9%  -16.38%  (p=0.000 n=97+96)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.98kB ± 0%  -29.07%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.14kB ± 0%  -38.49%  (p=0.000 n=100+100)
GorillaMux_ParamWrite      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     173kB ± 0%  -33.02%  (p=0.000 n=80+100)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%    11.1kB ± 0%  -32.82%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    19.6kB ± 0%  -37.02%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%      78kB ± 0%  -50.79%  (p=0.000 n=100+95)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       8.0 ± 0%  -33.33%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.48k ± 0%  -25.78%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        96 ± 0%  -25.00%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       168 ± 0%  -32.80%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.63k ± 0%  -55.56%  (p=0.000 n=100+100)
```

---

</details>



<details>
<summary> Older Xeon E, 2.4 GHz </summary>

Before vs After with omit Route flag enabled

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           3.31µs ±11%    2.44µs ±11%  -26.34%  (p=0.000 n=95+92)
GorillaMux_Param5          4.68µs ± 9%    3.96µs ±14%  -15.22%  (p=0.000 n=97+100)
GorillaMux_Param20         11.1µs ±10%     7.2µs ± 9%  -35.03%  (p=0.000 n=100+97)
GorillaMux_ParamWrite      3.37µs ±10%    2.56µs ± 8%  -24.21%  (p=0.000 n=95+94)
GorillaMux_GithubStatic    6.90µs ± 7%    3.85µs ± 8%  -44.16%  (p=0.000 n=96+91)
GorillaMux_GithubParam     9.85µs ± 6%    8.89µs ±11%   -9.74%  (p=0.000 n=98+96)
GorillaMux_GithubAll       5.15ms ±10%    4.77ms ± 7%   -7.36%  (p=0.000 n=96+96)
GorillaMux_GPlusStatic     2.38µs ± 8%    0.36µs ± 7%  -84.98%  (p=0.000 n=95+94)
GorillaMux_GPlusParam      4.30µs ±11%    3.33µs ±10%  -22.60%  (p=0.000 n=97+95)
GorillaMux_GPlus2Params    7.80µs ± 8%    6.82µs ±10%  -12.55%  (p=0.000 n=98+94)
GorillaMux_GPlusAll        65.8µs ±10%    50.5µs ±10%  -23.24%  (p=0.000 n=97+98)
GorillaMux_ParseStatic     2.98µs ±10%    0.70µs ± 9%  -76.68%  (p=0.000 n=99+94)
GorillaMux_ParseParam      3.31µs ± 9%    2.55µs ± 9%  -23.11%  (p=0.000 n=96+95)
GorillaMux_Parse2Params    3.92µs ± 8%    3.18µs ±12%  -18.86%  (p=0.000 n=97+96)
GorillaMux_ParseAll         125µs ± 9%      90µs ±12%  -28.23%  (p=0.000 n=99+96)
GorillaMux_StaticAll       1.32ms ± 6%    0.79ms ± 6%  -40.41%  (p=0.000 n=99+95)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.93kB ± 0%  -32.56%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.10kB ± 0%  -39.86%  (p=0.000 n=100+79)
GorillaMux_ParamWrite      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     149kB ± 0%  -42.37%  (p=0.000 n=79+86)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%     9.7kB ± 0%  -41.43%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    14.4kB ± 0%  -53.88%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%       8kB ± 0%  -95.24%  (p=0.000 n=100+100)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       7.0 ± 0%  -41.67%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.21k ± 0%  -39.57%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        79 ± 0%  -38.28%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       122 ± 0%  -51.20%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.16k ± 0%  -88.89%  (p=0.000 n=100+100)
```

Before vs After

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           3.31µs ±11%    2.59µs ±12%  -21.76%  (p=0.000 n=95+96)
GorillaMux_Param5          4.68µs ± 9%    3.80µs ± 7%  -18.79%  (p=0.000 n=97+92)
GorillaMux_Param20         11.1µs ±10%     7.2µs ± 9%  -35.19%  (p=0.000 n=100+99)
GorillaMux_ParamWrite      3.37µs ±10%    2.68µs ± 7%  -20.69%  (p=0.000 n=95+95)
GorillaMux_GithubStatic    6.90µs ± 7%    5.06µs ± 7%  -26.57%  (p=0.000 n=96+91)
GorillaMux_GithubParam     9.85µs ± 6%    8.83µs ± 9%  -10.42%  (p=0.000 n=98+98)
GorillaMux_GithubAll       5.15ms ±10%    4.71ms ± 9%   -8.50%  (p=0.000 n=96+97)
GorillaMux_GPlusStatic     2.38µs ± 8%    1.19µs ±10%  -50.24%  (p=0.000 n=95+100)
GorillaMux_GPlusParam      4.30µs ±11%    3.40µs ± 5%  -21.08%  (p=0.000 n=97+96)
GorillaMux_GPlus2Params    7.80µs ± 8%    6.96µs ± 8%  -10.71%  (p=0.000 n=98+98)
GorillaMux_GPlusAll        65.8µs ±10%    52.2µs ±10%  -20.65%  (p=0.000 n=97+96)
GorillaMux_ParseStatic     2.98µs ±10%    1.61µs ±10%  -46.04%  (p=0.000 n=99+100)
GorillaMux_ParseParam      3.31µs ± 9%    2.63µs ± 7%  -20.46%  (p=0.000 n=96+91)
GorillaMux_Parse2Params    3.92µs ± 8%    3.23µs ± 6%  -17.58%  (p=0.000 n=97+93)
GorillaMux_ParseAll         125µs ± 9%     102µs ± 9%  -18.79%  (p=0.000 n=99+96)
GorillaMux_StaticAll       1.32ms ± 6%    1.07ms ± 7%  -18.78%  (p=0.000 n=99+95)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.98kB ± 0%  -29.07%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.14kB ± 0%  -38.49%  (p=0.000 n=100+100)
GorillaMux_ParamWrite      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     173kB ± 0%  -33.02%  (p=0.000 n=79+96)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%    11.1kB ± 0%  -32.82%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    19.6kB ± 0%  -37.02%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%      78kB ± 0%  -50.79%  (p=0.000 n=100+100)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       8.0 ± 0%  -33.33%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.48k ± 0%  -25.78%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        96 ± 0%  -25.00%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       168 ± 0%  -32.80%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.63k ± 0%  -55.56%  (p=0.000 n=100+100)
```

---

</details>


<details>
<summary> Older i7, frequency scaling around 3.4 GHz, n=10 </summary>

Sorry, only 10 iterations each. I do not want to hear the fan for too long :)

Before vs After with omit Route flag enabled

```
goos: linux
goarch: amd64
pkg: github.com/julienschmidt/go-http-routing-benchmark
cpu: Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           1.80µs ± 2%    1.41µs ± 3%  -21.64%  (p=0.000 n=10+10)
GorillaMux_Param5          2.68µs ± 0%    2.34µs ± 1%  -12.43%  (p=0.000 n=10+10)
GorillaMux_Param20         5.92µs ± 0%    4.02µs ± 0%  -32.10%  (p=0.000 n=10+9)
GorillaMux_ParamWrite      1.89µs ± 1%    1.47µs ± 0%  -22.22%  (p=0.000 n=9+8)
GorillaMux_GithubStatic    4.05µs ± 1%    2.80µs ± 0%  -31.04%  (p=0.000 n=9+10)
GorillaMux_GithubParam     6.30µs ± 1%    5.90µs ± 1%   -6.27%  (p=0.000 n=10+10)
GorillaMux_GithubAll       3.14ms ± 1%    2.87ms ± 2%   -8.42%  (p=0.000 n=10+10)
GorillaMux_GPlusStatic     1.29µs ± 1%    0.23µs ± 1%  -82.37%  (p=0.000 n=10+10)
GorillaMux_GPlusParam      2.52µs ± 0%    2.07µs ± 1%  -17.69%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params    4.92µs ± 0%    4.49µs ± 1%   -8.71%  (p=0.000 n=10+10)
GorillaMux_GPlusAll        39.0µs ± 1%    31.5µs ± 1%  -19.28%  (p=0.000 n=10+10)
GorillaMux_ParseStatic     1.58µs ± 1%    0.47µs ± 1%  -70.01%  (p=0.000 n=10+10)
GorillaMux_ParseParam      1.89µs ± 0%    1.46µs ± 1%  -22.70%  (p=0.000 n=10+10)
GorillaMux_Parse2Params    2.31µs ± 2%    1.87µs ± 0%  -18.96%  (p=0.000 n=10+8)
GorillaMux_ParseAll        74.3µs ± 1%    55.4µs ± 0%  -25.48%  (p=0.000 n=10+10)
GorillaMux_StaticAll        797µs ± 0%     561µs ± 1%  -29.66%  (p=0.000 n=10+10)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=10+10)
GorillaMux_Param5          1.38kB ± 0%    0.93kB ± 0%  -32.56%  (p=0.000 n=10+10)
GorillaMux_Param20         3.48kB ± 0%    2.09kB ± 0%  -39.87%  (p=0.000 n=10+10)
GorillaMux_ParamWrite      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=10+10)
GorillaMux_GithubStatic    1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=10+10)
GorillaMux_GithubParam     1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=10+10)
GorillaMux_GithubAll        258kB ± 0%     149kB ± 0%  -42.37%  (p=0.000 n=10+9)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=10+10)
GorillaMux_GPlusParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=10+10)
GorillaMux_GPlusAll        16.5kB ± 0%     9.7kB ± 0%  -41.43%  (p=0.000 n=10+10)
GorillaMux_ParseStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=10+10)
GorillaMux_ParseParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=10+10)
GorillaMux_Parse2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=10+10)
GorillaMux_ParseAll        31.1kB ± 0%    14.4kB ± 0%  -53.88%  (p=0.000 n=10+10)
GorillaMux_StaticAll        158kB ± 0%       8kB ± 0%  -95.24%  (p=0.000 n=10+10)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_Param5            10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_Param20           12.0 ± 0%       7.0 ± 0%  -41.67%  (p=0.000 n=10+10)
GorillaMux_ParamWrite        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_GithubStatic      9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=10+10)
GorillaMux_GithubParam       10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_GithubAll        1.99k ± 0%     1.21k ± 0%  -39.57%  (p=0.000 n=10+10)
GorillaMux_GPlusStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=10+10)
GorillaMux_GPlusParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_GPlusAll           128 ± 0%        79 ± 0%  -38.28%  (p=0.000 n=10+10)
GorillaMux_ParseStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=10+10)
GorillaMux_ParseParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_Parse2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_ParseAll           250 ± 0%       122 ± 0%  -51.20%  (p=0.000 n=10+10)
GorillaMux_StaticAll        1.41k ± 0%     0.16k ± 0%  -88.89%  (p=0.000 n=10+10)
```

Before vs After
```
goos: linux
goarch: amd64
pkg: github.com/julienschmidt/go-http-routing-benchmark
cpu: Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           1.80µs ± 2%    1.38µs ± 2%  -23.29%  (p=0.000 n=10+10)
GorillaMux_Param5          2.68µs ± 0%    2.29µs ± 1%  -14.51%  (p=0.000 n=10+10)
GorillaMux_Param20         5.92µs ± 0%    3.95µs ± 1%  -33.32%  (p=0.000 n=10+10)
GorillaMux_ParamWrite      1.89µs ± 1%    1.46µs ± 2%  -22.59%  (p=0.000 n=9+10)
GorillaMux_GithubStatic    4.05µs ± 1%    3.41µs ± 1%  -15.89%  (p=0.000 n=9+9)
GorillaMux_GithubParam     6.30µs ± 1%    5.80µs ± 1%   -7.91%  (p=0.000 n=10+10)
GorillaMux_GithubAll       3.14ms ± 1%    2.89ms ± 1%   -7.79%  (p=0.000 n=10+10)
GorillaMux_GPlusStatic     1.29µs ± 1%    0.65µs ± 1%  -49.87%  (p=0.000 n=10+10)
GorillaMux_GPlusParam      2.52µs ± 0%    2.14µs ± 1%  -15.03%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params    4.92µs ± 0%    4.46µs ± 1%   -9.40%  (p=0.000 n=10+10)
GorillaMux_GPlusAll        39.0µs ± 1%    33.0µs ± 1%  -15.53%  (p=0.000 n=10+10)
GorillaMux_ParseStatic     1.58µs ± 1%    0.93µs ± 1%  -41.36%  (p=0.000 n=10+10)
GorillaMux_ParseParam      1.89µs ± 0%    1.51µs ± 2%  -20.23%  (p=0.000 n=10+9)
GorillaMux_Parse2Params    2.31µs ± 2%    1.92µs ± 1%  -16.95%  (p=0.000 n=10+10)
GorillaMux_ParseAll        74.3µs ± 1%    60.9µs ± 1%  -17.99%  (p=0.000 n=10+10)
GorillaMux_StaticAll        797µs ± 0%     699µs ± 0%  -12.25%  (p=0.000 n=10+10)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=10+10)
GorillaMux_Param5          1.38kB ± 0%    0.98kB ± 0%  -29.07%  (p=0.000 n=10+10)
GorillaMux_Param20         3.48kB ± 0%    2.14kB ± 0%  -38.48%  (p=0.000 n=10+10)
GorillaMux_ParamWrite      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=10+10)
GorillaMux_GithubStatic    1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=10+10)
GorillaMux_GithubParam     1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=10+10)
GorillaMux_GithubAll        258kB ± 0%     173kB ± 0%  -33.02%  (p=0.000 n=10+10)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=10+10)
GorillaMux_GPlusParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=10+10)
GorillaMux_GPlusAll        16.5kB ± 0%    11.1kB ± 0%  -32.82%  (p=0.000 n=10+10)
GorillaMux_ParseStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=10+10)
GorillaMux_ParseParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=10+10)
GorillaMux_Parse2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=10+10)
GorillaMux_ParseAll        31.1kB ± 0%    19.6kB ± 0%  -37.02%  (p=0.000 n=10+10)
GorillaMux_StaticAll        158kB ± 0%      78kB ± 0%  -50.79%  (p=0.000 n=10+10)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_Param5            10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_Param20           12.0 ± 0%       8.0 ± 0%  -33.33%  (p=0.000 n=10+10)
GorillaMux_ParamWrite        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_GithubStatic      9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=10+10)
GorillaMux_GithubParam       10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_GithubAll        1.99k ± 0%     1.48k ± 0%  -25.78%  (p=0.000 n=10+10)
GorillaMux_GPlusStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=10+10)
GorillaMux_GPlusParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_GPlusAll           128 ± 0%        96 ± 0%  -25.00%  (p=0.000 n=10+10)
GorillaMux_ParseStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=10+10)
GorillaMux_ParseParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_Parse2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_ParseAll           250 ± 0%       168 ± 0%  -32.80%  (p=0.000 n=10+10)
GorillaMux_StaticAll        1.41k ± 0%     0.63k ± 0%  -55.56%  (p=0.000 n=10+10)
```

---

</details>


---

</details>

---

</details>

If you read this far, please consider running benchmarks for your own use cases
 of `mux` and report back any changes. Thanks!

<details>
<summary> go.mod override </summary>

You can use the following override in your `go.mod` file:
```
replace github.com/gorilla/mux v1.8.1 => github.com/das7pad/mux v1.8.1-0.20220803193445-4e593050ec93
```
Optionally, you can enable the flag for not storing the `Route` in the request context:
```
m := mux.NewRouter()
m.OmitRouteFromContext(true)
```
</details>
",perf: cut allocations,2022-08-05 21:45:34+00:00,2023-12-07 04:58:54+00:00,2023-12-07 04:58:53+00:00,2023-12-07 04:58:53+00:00,False
f79c3af9b03521687ad5be6a9d0cf7e9b8207d7d,1581082162,735,closed,"This brings these docs in line with the rest of the repository.

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [x] Documentation Update
- [ ] Go Version Update
- [ ] Dependency Update

## Description

Remove use of hyphen in ""redirect"" in the documentation.

## Added/updated tests?

- [ ] Yes
- [x] No, and this is why: No regression test required 
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [x] `make test` is passing

`make verify` is not passing for me locally, but the failures are in unrelated
files. It may be because I don't see a .golangci.yml in the repo. I assume it's
using my linting config instead.
","Use ""redirect"" rather than ""re-direct"" in docs",2023-10-31 14:26:17+00:00,2023-11-13 04:31:50+00:00,2023-11-13 04:31:50+00:00,2023-11-13 04:31:50+00:00,False
b4617d0b9670ad14039b2739167fd35a60f557c5,1561619493,734,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [x] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update
- [ ] Go Version Update
- [ ] Dependency Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [x] `make verify` is passing
- [x] `make test` is passing
",update GitHub workflows,2023-10-18 01:33:54+00:00,2023-10-18 11:23:01+00:00,2023-10-18 11:23:00+00:00,2023-10-18 11:23:00+00:00,False
3401478badc7aa55470bc806ee8cd185a16f9298,1499789522,733,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [X] Documentation Update
- [ ] Go Version Update
- [ ] Dependency Update

## Description

Changed the SPA handler example in README.md in two areas. First, made sure to actually include the requested path in the call to `filepath.Join`. Secondly, if the requested path hits a directory, I think it would be beneficial to also serve the `indexPath` file, and not list the directory contents. I also edited the comments in the `README.md` file accordingly.

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [X] No, and this is why: I only changed the `README.md`, if any tests are necessary please let me know
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",fix SPA handler in README.md,2023-09-02 07:31:51+00:00,2023-09-21 03:06:09+00:00,2023-09-21 03:06:09+00:00,2023-09-21 03:06:09+00:00,False
4a671cbc5162efa2ecb1b353e6a704a62737d66c,940172942,676,closed,"**Summary of Changes**

1. Added `r.GetVarNames()` function to list all vars a route might need in order to call `r.URL()`",Add GetVarNames(),2022-05-18 16:15:43+00:00,2023-08-24 19:57:52+00:00,2023-08-24 19:57:52+00:00,2023-08-24 19:57:52+00:00,False
85123bf20e069b156415b871dea10517f6a8938a,1155408193,708,closed,"Before changing the context there is a blind spot, and for this reason, decided to add a line break.
",changed the routeVariables text content.,2022-12-09 05:40:27+00:00,2023-08-17 15:29:53+00:00,2023-08-17 15:29:53+00:00,2023-08-17 15:29:53+00:00,False
79f2f457ca5017e08de9f86ada03939a82dbf714,890668645,672,closed,"Fixes #666 

**Summary of Changes**

1. Update `Route` method documentation comments where the example in the comments showed a `Router` before. Updated method names include:
    * `Headers`
    * `HeadersRegexp`
    * `Host`
    * `Path`
    * `Queries`
    * `Subrouter`
    * `URL`

Notes:
* This includes what PR #667 did plus some changes requested by a maintainer in the comments
* I was a little torn about changing the example in `Subrouter` since `(*Router).Host()` (like several `(*Router)` methods) just calls `(*Router).NewRoute().Host()` so I understand if maintainers are ambivalent about that example or want it to remain the same.
",Clarify documentation examples of Route methods,2022-03-26 22:03:47+00:00,2023-08-17 04:49:00+00:00,2023-08-17 04:48:59+00:00,2023-08-17 04:48:59+00:00,False
395ad81d0ebffa0c5a36f3e5a2e720a7d5870d92,1435145376,712,closed,"The logical behavior of a router should return an HTTP status code of 404 when a request fails to satisfy route validation logic. Previously, MUX was returning a 405 HTTP status code in some rare scenarios, which was not valid in its case.

For more info, See: https://github.com/gorilla/mux/issues/704

Fixes #704 

**Summary of Changes**

1. Clear the mismatch error of the previous validations on method match.
2. Added related tests

> PS: Make sure your PR includes/updates tests! If you need help with this part, just ask!
",[BUG] Inconsistent HTTP status code on query mismatch,2023-07-14 17:58:45+00:00,2023-08-17 01:34:44+00:00,2023-08-17 01:34:43+00:00,2023-08-17 01:34:43+00:00,False
24c3e7f499efd8b1429cfe789c7e6a3631357045,954561258,678,closed,"Fixes #588

**Summary of Changes**

1. Add test case to validate proposed fix (both negative and positive test case).
2. Update `README.md` file.

PS: If you want to verify how I'm able to reproduce the issue and tried my fix. Here is a link of my local PR where I have configured `Github Action` to execute same test cases on all the platforms i.e. `ubuntu`, `macos` and `windows`. 

PR link: https://github.com/amustaque97/mux/pull/1

> PS: Make sure your PR includes/updates tests! If you need help with this part, just ask!
",Fix  `Single Page Application` example in `README.md` file,2022-06-01 18:20:35+00:00,2023-08-16 02:08:22+00:00,2023-08-16 02:08:21+00:00,2023-08-16 02:08:21+00:00,False
546dd0cc9f3ecdef8b065ac6336b4c6ed99887d4,1455080814,725,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [x] Documentation Update

## Description

`go fmt` now formats godoc comments. I apply it.

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [x] No, and this is why: this pull request updates only comments
- [ ] I need help with writing tests

## Run verifications and test

- [x] `make verify` is passing
- [x] `make test` is passing
",run go fmt with Go 1.20,2023-07-30 08:59:09+00:00,2023-07-31 01:45:08+00:00,2023-07-31 01:44:28+00:00,2023-07-31 01:44:28+00:00,False
651928c42f7b60c7942e46d5f651dd1ece444246,1455191013,727,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [x] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Update issues.yml,2023-07-30 16:37:31+00:00,2023-08-16 02:05:23+00:00,2023-07-30 16:37:42+00:00,2023-07-30 16:37:42+00:00,False
cfc696d6d239ff68ceb71ee35c9a4e4ef3f30ed9,1455187426,726,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Update issues.yml,2023-07-30 16:21:53+00:00,2023-07-30 16:23:58+00:00,2023-07-30 16:23:57+00:00,2023-07-30 16:23:57+00:00,False
809d12850fc170caa4229eb2da58a4701c9837b8,1447552980,723,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Update LICENSE,2023-07-25 00:43:45+00:00,2023-07-25 17:19:45+00:00,2023-07-25 17:19:44+00:00,2023-07-25 17:19:44+00:00,False
753457f3059d3db9a96f9f4c67d7f3724e97478d,1448768908,724,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [x] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #710
- Closes #710

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Updated the logo in README.md,2023-07-25 16:31:17+00:00,2023-07-25 16:35:17+00:00,2023-07-25 16:35:17+00:00,2023-07-25 16:35:17+00:00,False
ff63d0e2fd6b3634b25a63c85c27a3dc80a3b8c8,1445729538,722,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Update LICENSE,2023-07-23 20:23:47+00:00,2023-07-23 20:32:34+00:00,2023-07-23 20:32:33+00:00,2023-07-23 20:32:33+00:00,False
2392d7d19e8c3b02af216a404709415813467766,1445729166,721,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Delete AUTHORS,2023-07-23 20:22:13+00:00,2023-07-23 20:29:13+00:00,2023-07-23 20:29:12+00:00,2023-07-23 20:29:12+00:00,False
81b48a39f012296f51d582d3cefaaba1c2f5a01f,1445728593,720,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Delete stale.yml,2023-07-23 20:19:37+00:00,2023-07-23 20:28:40+00:00,2023-07-23 20:28:39+00:00,2023-07-23 20:28:39+00:00,False
96847b8b06f990d7b53c8a5c647ee73d3e70582a,1445728494,719,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Delete release-drafter.yml,2023-07-23 20:19:12+00:00,2023-07-23 20:27:25+00:00,2023-07-23 20:27:24+00:00,2023-07-23 20:27:24+00:00,False
1fa2ee87bf61940bfac616e98513448af97a1813,1441705808,718,closed,"Fixes # https://gorilla-web-toolkit.atlassian.net/browse/GPT-95

**Summary of Changes**
Added `.github/workflows/test.yml` that runs golangci-lint & go tests on any PR created or each push to main branch. 
","[GPT-95] Update go version, add tools for verification and testing",2023-07-19 20:36:15+00:00,2023-07-23 20:15:05+00:00,2023-07-23 20:15:05+00:00,2023-07-23 20:15:05+00:00,False
abccd7e4d7c117370b7908f51e48decb38b6835b,1435917629,713,closed,"Remove archive message
@AlexVulaj ptal",Update README.md,2023-07-15 14:49:12+00:00,2023-07-31 06:22:22+00:00,2023-07-15 20:07:07+00:00,2023-07-15 20:07:07+00:00,False
07eedffb4388b4ed26b86c67aedca1e513e7553b,1029166684,693,closed,"Fixes #692 

**Summary of Changes**

1. Fix the `README.md` middleware section. An example is demonstrated about the `authenticationMiddleware` and `authenticationMiddleware` initialization is incorrect because incorrect initialization in real-world code throws a panic runtime error.  The correct way of initialization is 
```golang
amw := authenticationMiddleware{make(map[string]string)}
```
and this PR fixes that. No test cases are required in this case because in the example file it is already written correctly 
https://github.com/gorilla/mux/blob/master/example_authentication_middleware_test.go#L43

> PS: Make sure your PR includes/updates tests! If you need help with this part, just ask!
",Fix `authenticationMiddleware` initialization in the `README.md` file,2022-08-17 18:37:16+00:00,2022-08-18 11:19:00+00:00,2022-08-17 20:49:02+00:00,2022-08-17 20:49:02+00:00,False
c889844abd3601217c96aabc4b2dd89f6d904c01,963934858,679,closed,"**Summary of Changes**

Replaced hardcoded constant `regexType*` declarations with `iota`.",regexp: use iota instead of hardcoded values for regexType*,2022-06-10 09:54:18+00:00,2022-06-26 12:14:17+00:00,2022-06-26 11:46:01+00:00,2022-06-26 11:46:01+00:00,False
91708ff8e35bafc8612f690a25f5dd0be6f16864,800686995,660,closed,,docs: update README w.r.t new maintainer ask,2021-12-12 16:22:34+00:00,2021-12-12 16:29:07+00:00,2021-12-12 16:29:05+00:00,2021-12-12 16:29:05+00:00,False
3cf0d013e53d62a96c096366d300c84489c26dd5,499085271,602,closed,"I was searching for 404 in the docs and didn't find anything and almost assumed Mux didn't have the ability for a custom 404 handlers. Add another sentence with ""404"" and ""Not Found"" so quick searching can find them.

Same for 405.","Include ""404"" and ""405"" in the docs",2020-10-07 08:45:36+00:00,2021-09-14 15:04:50+00:00,2021-09-14 12:12:20+00:00,2021-09-14 12:12:20+00:00,False
d07530f46e1eec4e40346e24af34dcc6750ad39f,485996027,595,closed,https://circleci.com/blog/circleci-matrix-jobs/,build: CircleCI 2.1 + build matrix,2020-09-12 19:12:03+00:00,2020-09-12 19:21:03+00:00,2020-09-12 19:20:57+00:00,2020-09-12 19:20:57+00:00,False
98cb6bf42e086f6af920b965c38cacc07402d51b,447552263,579,closed,"Continuing from PR #447 we have to add extra
check to ignore the port as well

",fix: regression in vars extract for wildcard host,2020-07-10 17:15:45+00:00,2020-08-22 20:49:44+00:00,2020-07-11 20:05:22+00:00,2020-07-11 20:05:22+00:00,False
