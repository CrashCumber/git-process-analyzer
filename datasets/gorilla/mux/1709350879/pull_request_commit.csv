commit_sha,id,number,state,body,title,created_at,updated_at,closed_at,merged_at,draft
85123bf20e069b156415b871dea10517f6a8938a,1155408193,708,closed,"Before changing the context there is a blind spot, and for this reason, decided to add a line break.
",changed the routeVariables text content.,2022-12-09 05:40:27+00:00,2023-08-17 15:29:53+00:00,2023-08-17 15:29:53+00:00,2023-08-17 15:29:53+00:00,False
79f2f457ca5017e08de9f86ada03939a82dbf714,890668645,672,closed,"Fixes #666 

**Summary of Changes**

1. Update `Route` method documentation comments where the example in the comments showed a `Router` before. Updated method names include:
    * `Headers`
    * `HeadersRegexp`
    * `Host`
    * `Path`
    * `Queries`
    * `Subrouter`
    * `URL`

Notes:
* This includes what PR #667 did plus some changes requested by a maintainer in the comments
* I was a little torn about changing the example in `Subrouter` since `(*Router).Host()` (like several `(*Router)` methods) just calls `(*Router).NewRoute().Host()` so I understand if maintainers are ambivalent about that example or want it to remain the same.
",Clarify documentation examples of Route methods,2022-03-26 22:03:47+00:00,2023-08-17 04:49:00+00:00,2023-08-17 04:48:59+00:00,2023-08-17 04:48:59+00:00,False
395ad81d0ebffa0c5a36f3e5a2e720a7d5870d92,1435145376,712,closed,"The logical behavior of a router should return an HTTP status code of 404 when a request fails to satisfy route validation logic. Previously, MUX was returning a 405 HTTP status code in some rare scenarios, which was not valid in its case.

For more info, See: https://github.com/gorilla/mux/issues/704

Fixes #704 

**Summary of Changes**

1. Clear the mismatch error of the previous validations on method match.
2. Added related tests

> PS: Make sure your PR includes/updates tests! If you need help with this part, just ask!
",[BUG] Inconsistent HTTP status code on query mismatch,2023-07-14 17:58:45+00:00,2023-08-17 01:34:44+00:00,2023-08-17 01:34:43+00:00,2023-08-17 01:34:43+00:00,False
24c3e7f499efd8b1429cfe789c7e6a3631357045,954561258,678,closed,"Fixes #588

**Summary of Changes**

1. Add test case to validate proposed fix (both negative and positive test case).
2. Update `README.md` file.

PS: If you want to verify how I'm able to reproduce the issue and tried my fix. Here is a link of my local PR where I have configured `Github Action` to execute same test cases on all the platforms i.e. `ubuntu`, `macos` and `windows`. 

PR link: https://github.com/amustaque97/mux/pull/1

> PS: Make sure your PR includes/updates tests! If you need help with this part, just ask!
",Fix  `Single Page Application` example in `README.md` file,2022-06-01 18:20:35+00:00,2023-08-16 02:08:22+00:00,2023-08-16 02:08:21+00:00,2023-08-16 02:08:21+00:00,False
546dd0cc9f3ecdef8b065ac6336b4c6ed99887d4,1455080814,725,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [x] Documentation Update

## Description

`go fmt` now formats godoc comments. I apply it.

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [x] No, and this is why: this pull request updates only comments
- [ ] I need help with writing tests

## Run verifications and test

- [x] `make verify` is passing
- [x] `make test` is passing
",run go fmt with Go 1.20,2023-07-30 08:59:09+00:00,2023-07-31 01:45:08+00:00,2023-07-31 01:44:28+00:00,2023-07-31 01:44:28+00:00,False
651928c42f7b60c7942e46d5f651dd1ece444246,1455191013,727,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [x] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Update issues.yml,2023-07-30 16:37:31+00:00,2023-08-16 02:05:23+00:00,2023-07-30 16:37:42+00:00,2023-07-30 16:37:42+00:00,False
cfc696d6d239ff68ceb71ee35c9a4e4ef3f30ed9,1455187426,726,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Update issues.yml,2023-07-30 16:21:53+00:00,2023-07-30 16:23:58+00:00,2023-07-30 16:23:57+00:00,2023-07-30 16:23:57+00:00,False
809d12850fc170caa4229eb2da58a4701c9837b8,1447552980,723,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Update LICENSE,2023-07-25 00:43:45+00:00,2023-07-25 17:19:45+00:00,2023-07-25 17:19:44+00:00,2023-07-25 17:19:44+00:00,False
753457f3059d3db9a96f9f4c67d7f3724e97478d,1448768908,724,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [x] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #710
- Closes #710

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Updated the logo in README.md,2023-07-25 16:31:17+00:00,2023-07-25 16:35:17+00:00,2023-07-25 16:35:17+00:00,2023-07-25 16:35:17+00:00,False
ff63d0e2fd6b3634b25a63c85c27a3dc80a3b8c8,1445729538,722,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Update LICENSE,2023-07-23 20:23:47+00:00,2023-07-23 20:32:34+00:00,2023-07-23 20:32:33+00:00,2023-07-23 20:32:33+00:00,False
2392d7d19e8c3b02af216a404709415813467766,1445729166,721,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Delete AUTHORS,2023-07-23 20:22:13+00:00,2023-07-23 20:29:13+00:00,2023-07-23 20:29:12+00:00,2023-07-23 20:29:12+00:00,False
81b48a39f012296f51d582d3cefaaba1c2f5a01f,1445728593,720,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Delete stale.yml,2023-07-23 20:19:37+00:00,2023-07-23 20:28:40+00:00,2023-07-23 20:28:39+00:00,2023-07-23 20:28:39+00:00,False
96847b8b06f990d7b53c8a5c647ee73d3e70582a,1445728494,719,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",Delete release-drafter.yml,2023-07-23 20:19:12+00:00,2023-07-23 20:27:25+00:00,2023-07-23 20:27:24+00:00,2023-07-23 20:27:24+00:00,False
1fa2ee87bf61940bfac616e98513448af97a1813,1441705808,718,closed,"Fixes # https://gorilla-web-toolkit.atlassian.net/browse/GPT-95

**Summary of Changes**
Added `.github/workflows/test.yml` that runs golangci-lint & go tests on any PR created or each push to main branch. 
","[GPT-95] Update go version, add tools for verification and testing",2023-07-19 20:36:15+00:00,2023-07-23 20:15:05+00:00,2023-07-23 20:15:05+00:00,2023-07-23 20:15:05+00:00,False
abccd7e4d7c117370b7908f51e48decb38b6835b,1435917629,713,closed,"Remove archive message
@AlexVulaj ptal",Update README.md,2023-07-15 14:49:12+00:00,2023-07-31 06:22:22+00:00,2023-07-15 20:07:07+00:00,2023-07-15 20:07:07+00:00,False
7456b4e9ae7b67e27ffaa2e497941e77d39bc884,1435917629,713,closed,"Remove archive message
@AlexVulaj ptal",Update README.md,2023-07-15 14:49:12+00:00,2023-07-31 06:22:22+00:00,2023-07-15 20:07:07+00:00,2023-07-15 20:07:07+00:00,False
07eedffb4388b4ed26b86c67aedca1e513e7553b,1029166684,693,closed,"Fixes #692 

**Summary of Changes**

1. Fix the `README.md` middleware section. An example is demonstrated about the `authenticationMiddleware` and `authenticationMiddleware` initialization is incorrect because incorrect initialization in real-world code throws a panic runtime error.  The correct way of initialization is 
```golang
amw := authenticationMiddleware{make(map[string]string)}
```
and this PR fixes that. No test cases are required in this case because in the example file it is already written correctly 
https://github.com/gorilla/mux/blob/master/example_authentication_middleware_test.go#L43

> PS: Make sure your PR includes/updates tests! If you need help with this part, just ask!
",Fix `authenticationMiddleware` initialization in the `README.md` file,2022-08-17 18:37:16+00:00,2022-08-18 11:19:00+00:00,2022-08-17 20:49:02+00:00,2022-08-17 20:49:02+00:00,False
c889844abd3601217c96aabc4b2dd89f6d904c01,963934858,679,closed,"**Summary of Changes**

Replaced hardcoded constant `regexType*` declarations with `iota`.",regexp: use iota instead of hardcoded values for regexType*,2022-06-10 09:54:18+00:00,2022-06-26 12:14:17+00:00,2022-06-26 11:46:01+00:00,2022-06-26 11:46:01+00:00,False
91708ff8e35bafc8612f690a25f5dd0be6f16864,800686995,660,closed,,docs: update README w.r.t new maintainer ask,2021-12-12 16:22:34+00:00,2021-12-12 16:29:07+00:00,2021-12-12 16:29:05+00:00,2021-12-12 16:29:05+00:00,False
3cf0d013e53d62a96c096366d300c84489c26dd5,499085271,602,closed,"I was searching for 404 in the docs and didn't find anything and almost assumed Mux didn't have the ability for a custom 404 handlers. Add another sentence with ""404"" and ""Not Found"" so quick searching can find them.

Same for 405.","Include ""404"" and ""405"" in the docs",2020-10-07 08:45:36+00:00,2021-09-14 15:04:50+00:00,2021-09-14 12:12:20+00:00,2021-09-14 12:12:20+00:00,False
d07530f46e1eec4e40346e24af34dcc6750ad39f,485996027,595,closed,https://circleci.com/blog/circleci-matrix-jobs/,build: CircleCI 2.1 + build matrix,2020-09-12 19:12:03+00:00,2020-09-12 19:21:03+00:00,2020-09-12 19:20:57+00:00,2020-09-12 19:20:57+00:00,False
98cb6bf42e086f6af920b965c38cacc07402d51b,447552263,579,closed,"Continuing from PR #447 we have to add extra
check to ignore the port as well

",fix: regression in vars extract for wildcard host,2020-07-10 17:15:45+00:00,2020-08-22 20:49:44+00:00,2020-07-11 20:05:22+00:00,2020-07-11 20:05:22+00:00,False
948bec34b5168796bf3fc4dbb09215baa970351a,403586804,568,closed,"

Fixes #

Comment for CurrentRoute claimed that setting the KeepContext option would propagate
the Route even after the request. The KeepContext option is deprecated and has no effect.

> PS: Make sure your PR includes/updates tests! If you need help with this part, just ask!
",Remove stale text from comment.,2020-04-15 07:23:32+00:00,2020-05-17 04:02:55+00:00,2020-05-17 04:02:55+00:00,2020-05-17 04:02:54+00:00,False
75dcda0896e109a2a22c9315bca3bb21b87b2ba5,361858009,544,closed,"**Summary of Changes**

A production server is seeing a significant amount of allocations in (*routeRegexp).getURLQuery

Since it is only interested in a single value and only the first value we create a specialized function for that.

Comparing a few parameter parsing scenarios:

```
Benchmark_findQueryKey/0-8 	 7184014	       168 ns/op	       0 B/op	       0 allocs/op
Benchmark_findQueryKey/1-8 	 5307873	       227 ns/op	      48 B/op	       3 allocs/op
Benchmark_findQueryKey/2-8 	 1560836	       770 ns/op	     483 B/op	      10 allocs/op
Benchmark_findQueryKey/3-8 	 1296200	       931 ns/op	     559 B/op	      11 allocs/op
Benchmark_findQueryKey/4-8 	  666502	      1769 ns/op	       3 B/op	       1 allocs/op

Benchmark_findQueryKeyGoLib/0-8 	 1740973	       690 ns/op	     864 B/op	       8 allocs/op
Benchmark_findQueryKeyGoLib/1-8 	 3029618	       393 ns/op	     432 B/op	       4 allocs/op
Benchmark_findQueryKeyGoLib/2-8 	  461427	      2511 ns/op	    1542 B/op	      24 allocs/op
Benchmark_findQueryKeyGoLib/3-8 	  324252	      3804 ns/op	    1984 B/op	      28 allocs/op
Benchmark_findQueryKeyGoLib/4-8 	   69348	     14928 ns/op	   12716 B/op	     130 allocs/op
```

Test included.",Reduce allocations in (*routeRegexp).getURLQuery,2020-01-12 18:29:43+00:00,2020-01-12 19:44:57+00:00,2020-01-12 19:17:44+00:00,2020-01-12 19:17:44+00:00,False
49c01487a141b49f8ffe06277f3dca3ee80a55fa,331972055,526,closed,"Fixed:
1. mux.go:366:5: error var SkipRouter should have name of the form ErrFoo
2. regexp.go:184:9: if block ends with a return statement, so drop this else and outdent its block
",Fixed golint warnings,2019-10-24 10:25:19+00:00,2019-11-21 17:05:07+00:00,2019-11-21 17:05:01+00:00,2019-11-21 17:05:01+00:00,False
4de8a5a4d283677c69afa1a86a044c8451633a18,342621744,536,closed,"fix headers regexp test case
",fix headers regexp test case,2019-11-19 11:10:03+00:00,2019-11-19 13:02:20+00:00,2019-11-19 13:02:15+00:00,2019-11-19 13:02:15+00:00,False
2854a05fd3e2a9ecec0802bcb6eda09bbc0eea9f,341159540,535,closed,"Fixes #534 

**Summary of Changes**

1. Adds a test case for the repro given in issue #534
2. Fixes the logic in CORSMethodMiddleware to handle matching routes better (now more closely mirrors the way routes are actually matched, just ignoring method mismatch errors)
",Fix the CORSMethodMiddleware bug with subrouters,2019-11-14 20:22:47+00:00,2019-11-17 01:33:50+00:00,2019-11-17 01:33:22+00:00,2019-11-17 01:33:22+00:00,False
946b6237eb8d0ce3225f502b7fd4208d0b60ce5f,341159540,535,closed,"Fixes #534 

**Summary of Changes**

1. Adds a test case for the repro given in issue #534
2. Fixes the logic in CORSMethodMiddleware to handle matching routes better (now more closely mirrors the way routes are actually matched, just ignoring method mismatch errors)
",Fix the CORSMethodMiddleware bug with subrouters,2019-11-14 20:22:47+00:00,2019-11-17 01:33:50+00:00,2019-11-17 01:33:22+00:00,2019-11-17 01:33:22+00:00,False
f395758b854c4efa789b8c1e9b73479704c548cb,331866631,525,closed,"Fixes nothing

**Summary of Changes**

1. Removes context.go. Originally this was around so on Go < 1.7 we could use gorilla/context to ""polyfill"" context, but now that we've dropped support for that, I don't think it's necessary to have those helpers, plus it's nice to get rid of the (small) cognitive overhead of another file
2. Renames the request context functions from the pattern `setFoo` to `requestWithFoo`, since I think this makes it a bit more clear that they're returning a request with a new context wrapping the old one, not changing the request
3. Changes the request context functions to take concrete types instead of empty interfaces because there's no reason for them to take interfaces
4. Moves the single test in context_test.go to mux_test.go since that seems to be testing the muxer itself anyways, not really the context implementation or anything

> PS: Make sure your PR includes/updates tests! If you need help with this part, just ask!
",Remove/cleanup request context helpers,2019-10-24 05:50:33+00:00,2019-10-24 12:13:04+00:00,2019-10-24 12:12:56+00:00,2019-10-24 12:12:56+00:00,False
ff4e71f144166b1dfe3017a146f8ed32a82e688b,279238050,474,closed,"It's not expected that the request's URL is fully populated when used on
the server-side (it's more of a client-side field), so we shouldn't
expect it to be present.

In practice, it's only rarely set at all on the server, making mux's
`Schemes` matcher tricky to use as it is.

This commit adds a test which would have failed before demonstrating the
problem, as well as a fix which I think makes `.Schemes` match what
users expect.

This will technically break anyone who did the following:

```go
router.Schemes("""") // match http and https
```",Guess the scheme if r.URL.Scheme is unset,2019-05-15 19:45:49+00:00,2019-10-18 00:48:28+00:00,2019-10-18 00:48:19+00:00,2019-10-18 00:48:19+00:00,False
884b5ffcbd3a11b730f0b75f5c86ac408753c34d,311511885,516,closed,Simple optimisation to reduce memory allocations and copying(while appending).,"Added capacity to slice creation, when capacity is known",2019-08-27 18:32:59+00:00,2019-08-30 12:11:57+00:00,2019-08-30 12:11:57+00:00,2019-08-30 12:11:57+00:00,False
e1863a64f3c620ef604fb7905a0351e69f6a51e4,311031447,514,closed,"Making use of the constants provided in the http package, for uniformity.
Related pull requests:
https://github.com/gorilla/mux/pull/349
https://github.com/gorilla/mux/pull/350","Modified http status codes, using constants provided by the http package",2019-08-26 18:30:13+00:00,2019-08-27 12:58:22+00:00,2019-08-27 12:58:14+00:00,2019-08-27 12:58:14+00:00,False
9536e4053d763b54d935f1ce731a315cfb42b979,308930610,510,closed,"Fixes #509

**Summary of Changes**

1. check new handler not nil before discarding MethodNotAllowed error
2. add unit test

",bugfix/subrouter custom methodNotAllowed handler returning 404 (#509),2019-08-20 08:20:44+00:00,2019-08-27 09:42:38+00:00,2019-08-26 00:12:00+00:00,2019-08-26 00:12:00+00:00,False
e0cdff45b7de56d3ad24ef9871c14fe4238475aa,310569667,513,closed,(Self hosting the gorilla image for testing),Update README (self-host logo),2019-08-24 00:38:41+00:00,2019-08-24 00:44:51+00:00,2019-08-24 00:44:48+00:00,2019-08-24 00:44:48+00:00,False
e67b3c02c7195c052acff13261f0c9fd1ba53011,299588237,503,closed,,Remove TravisCI badge,2019-07-20 20:13:53+00:00,2019-07-20 20:14:38+00:00,2019-07-20 20:14:36+00:00,2019-07-20 20:14:35+00:00,False
7a1bf406d6f5f8cfef4802eb0d949606c6ee7aea,293064906,493,closed,"Fixes #464

**Summary of Changes**

1. Adds documentation to the README.md for using mux to serve API endpoints alongside a SPA.

**Testing**

I ran create-react-app, made a prod build, copied the build directory, and tested this out. Seems to work great.",Add documentation for using mux to serve a SPA,2019-06-29 21:54:06+00:00,2019-07-20 16:27:07+00:00,2019-07-20 14:53:36+00:00,2019-07-20 14:53:36+00:00,False
eab9c4f3d22d907d728aa0f5918934357866249e,299528060,501,closed,Use a single append call instead of a ranged for loop.,Simplify code,2019-07-20 01:52:27+00:00,2019-07-20 14:49:39+00:00,2019-07-20 14:49:39+00:00,2019-07-20 14:49:39+00:00,False
50fbc3e7fbfcdb4fb850686588071e5f0bdd4a0a,299528145,502,closed,No need to convert here.,Avoid unnecessary conversion,2019-07-20 01:53:43+00:00,2019-07-20 15:38:46+00:00,2019-07-20 14:48:32+00:00,2019-07-20 14:48:32+00:00,False
d83b6ffe499a29cc05fc977988d0392851779620,293484796,495,closed,"Build config update - name key steps, add [optional] lint step.

Adds `SKIP_GOLINT=1` to the mux build due to linter errors that would break the public API:

```sh
➜  golint
mux.go:368:5: error var SkipRouter should have name of the form ErrFoo
```",Update config.yml,2019-07-01 20:21:37+00:00,2019-07-01 20:26:42+00:00,2019-07-01 20:26:34+00:00,2019-07-01 20:26:34+00:00,False
00bdffe0f3c77e27d2cf6f5c70232a2d3e4d9c15,293077897,494,closed,Updated to reflect new labels.,Update stale.yml,2019-06-30 04:16:31+00:00,2019-06-30 04:17:57+00:00,2019-06-30 04:17:53+00:00,2019-06-30 04:17:53+00:00,False
05347690167e152b85ece29fdfa9cc12a7b8c385,282346635,477,closed,"This PR implements the behavior outlined in #476:

* Sets `Access-Control-Allow-Methods` on all requests to a route with an OPTIONS method matcher
* Does not return after setting the `Access-Control-Allow-Methods` header
* Does not append `OPTIONS` header to `Access-Control-Allow-Methods` regardless of whether there is an OPTIONS method matcher. Only returns `OPTIONS` if there is an actual matcher
* Adds tests for the above behavior

Closes #476",Improve CORS Method Middleware,2019-05-27 02:30:18+00:00,2020-01-18 04:55:27+00:00,2019-06-29 20:52:30+00:00,2019-06-29 20:52:30+00:00,False
d70f7b4baacbd8115844925606cf68ee63d438cc,293053589,492,closed,"Removes the old issue templates in favor of the org-wide ones now at https://github.com/gorilla/.github
",Delete ISSUE_TEMPLATE.md,2019-06-29 18:01:16+00:00,2019-06-29 18:02:02+00:00,2019-06-29 18:01:59+00:00,2019-06-29 18:01:59+00:00,False
48f941fa99947e50375f2b0dd4b3b060d15b2fe8,282350352,478,closed,"Part of #409, awaiting feedback on whether I should update `old_test.go` before tagging that this completely closes that issue.

Uses Go subtests for all the middleware tests. I don't love the solution for `CORSMethodMiddleware`, because those tests don't really make sense, because that middleware doesn't really make sense (my bad, see #476). The new tests I wrote in #477 use subtests and completely replace the current tests for that, though.",Use subtests for middleware tests,2019-05-27 03:00:49+00:00,2019-06-29 17:24:20+00:00,2019-06-29 17:24:13+00:00,2019-06-29 17:24:13+00:00,False
64954673e972292a409b5c8d13b16ed797b905d0,292991378,490,closed,,Delete .travis.yml,2019-06-28 23:06:40+00:00,2019-06-28 23:07:34+00:00,2019-06-28 23:07:31+00:00,2019-06-28 23:07:31+00:00,False
4248f5cd8717eaea35eded08100714b2b2bac756,289514636,489,closed,"Closes #488 

Runnable example of issue: https://play.golang.org/p/a45X5e78c0h
Runnable example with fix: https://play.golang.org/p/zE7dBKdOjCF",Fix nil panic in authentication middleware example,2019-06-19 02:21:45+00:00,2019-06-28 15:33:07+00:00,2019-06-28 15:33:07+00:00,2019-06-28 15:33:07+00:00,False
212aa90d7cec051ab29930d5c56f758f6f69a789,288646021,484,closed,Validate CircleCI.,[WIP] Create CircleCI config,2019-06-16 19:26:35+00:00,2019-06-27 04:33:46+00:00,2019-06-24 16:05:40+00:00,2019-06-24 16:05:40+00:00,False
ed099d42384823742bba0bf9a72b53b55c9e2e38,252519809,447,closed,"… a port isn't specified in the template

In lieu of checking the template pattern on every Match request, a bool is added to the routeRegexp, and set if the routeRegexp is a host AND there is no "":"" in the template. I dislike extending the type, but I'd dislike doing a string match on every single Match, even more.

All existing mux tests pass. Additionally my application-level (Convey) positive and negative tests pass. Feel free to comment: You know your code better than I do.

```
=== RUN   TestPathHostPortUnset

  When a request is made, with a host and port specified, the correct match is found (no port specified) ✔✔✔✔✔


16 total assertions

--- PASS: TestPathHostPortUnset (0.00s)
=== RUN   TestPathHostPortSet

  When a request is made, with a host and port specified, and the port does match, a match is found ✔✔✔✔✔


21 total assertions

--- PASS: TestPathHostPortSet (0.00s)
=== RUN   TestPathHostPortSetNope

  When a request is made, with a host and port specified, and the port does not match, a match is NOT found ✔✔✔


24 total assertions

--- PASS: TestPathHostPortSetNope (0.00s)

```","Route.Host -matching will ignore any provided port from getHost(), if…",2019-02-13 00:26:02+00:00,2020-07-10 17:11:11+00:00,2019-05-17 00:20:45+00:00,2019-05-17 00:20:45+00:00,False
c5c6c98bc25355028a63748a498942a6398ccd22,261758066,462,closed,"# What I did
Remove `sudo: false` setting from `travis.yml` .

# Context
According to the following posts, Travis-CI had two Linux infrastructures which are containers and virtual machines, but recently Travis-CI was combined two Linux infrastructures into a virtual machine-based Linux infrastructure.

https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration
https://blog.travis-ci.com/2018-10-04-combining-linux-infrastructures

Now Container-based environment is duplicated.

[Build Environment Overview - Travis CI](https://docs.travis-ci.com/user/reference/overview/#deprecated-virtualization-environments)

> If you currently specify sudo: false in your .travis.yml, we recommend removing that configuration soon.

quoted by
https://blog.travis-ci.com/2018-11-19-required-linux-infrastructure-migration

",Remove sudo setting from travis.yml,2019-03-16 08:28:14+00:00,2019-03-16 18:20:02+00:00,2019-03-16 13:32:44+00:00,2019-03-16 13:32:44+00:00,False
15a353a636720571d19e37b34a14499c3afa9991,256807141,457,closed,Fixes #456 ,adding Router.Name to create new Route,2019-02-27 19:21:14+00:00,2019-02-28 18:16:40+00:00,2019-02-28 18:12:04+00:00,2019-02-28 18:12:04+00:00,False
8eaa9f13091105874ef3e20c65922e382cef3c64,256809802,458,closed,"`go vet` instead of `go tool vet`

![screen shot 2019-02-27 at 2 28 38 pm](https://user-images.githubusercontent.com/6145422/53517180-0eda2f80-3a9c-11e9-88a5-e66776b19a14.png)
",fix go1.12 go vet usage,2019-02-27 19:29:25+00:00,2019-02-28 17:36:07+00:00,2019-02-28 17:36:07+00:00,2019-02-28 17:36:07+00:00,False
8559a4f775fc329165fe32bd4c2543de8ada8fce,253712458,454,closed,`It` should be `If`,Minor spelling mistake ,2019-02-17 13:46:35+00:00,2019-02-17 15:38:49+00:00,2019-02-17 15:38:49+00:00,2019-02-17 15:38:49+00:00,False
a7962380ca08b5a188038c69871b8d3fbdf31e89,247719739,443,closed,,replace rr.HeaderMap by rr.Header(),2019-01-25 15:50:52+00:00,2019-01-25 16:05:54+00:00,2019-01-25 16:05:54+00:00,2019-01-25 16:05:54+00:00,False
797e653da60e4619dcb0ae703714147b5a7454c6,247646408,442,closed,"From the docs: Changing the header map after a call to WriteHeader (or
Write) has no effect unless the modified headers are
trailers.",Call WriteHeader after setting other header(s) in the example,2019-01-25 11:34:19+00:00,2019-01-25 11:41:50+00:00,2019-01-25 11:41:50+00:00,2019-01-25 11:41:50+00:00,False
08e7f807d38d6a870193019bb439056118661505,242711908,438,closed,"MatchErr is set by the router to ErrNotFound if no route matches. If
no route of a Subrouter matches the error can by safely ignored. This
implementation only ignores these errors and does not ignore other
errors like ErrMethodMismatch.",Ignore ErrNotFound while matching Subrouters,2019-01-07 16:31:44+00:00,2019-01-08 16:25:44+00:00,2019-01-08 14:29:30+00:00,2019-01-08 14:29:30+00:00,False
f3ff42f93a451d7ffb2ff11cb9485f3f88089c83,190922961,383,closed,"I ran into #2, i think its safe to simply `return r.Host` because `r.URL.IsAbs()` case is already doing that and is covered by existing tests cases.","fix #2, return full host:port info from getHost",2018-05-28 12:51:10+00:00,2019-04-26 23:33:23+00:00,2019-01-04 15:08:46+00:00,2019-01-04 15:08:46+00:00,False
ef912dd76ebe9d9848c6e0fd80eaebccc9a11631,240289915,431,closed,"fix for issue #429
",fix for issue #429,2018-12-20 20:17:25+00:00,2019-02-15 20:35:29+00:00,2018-12-28 00:42:16+00:00,2018-12-28 00:42:16+00:00,False
a31c1782bfb10b7b3799d5ec06b5ccbd98c4ec7e,240877949,434,closed,"Because domain.com is an actual business, example.com should be used for example purposes.",Replace domain.com with example.com,2018-12-25 14:24:28+00:00,2018-12-25 16:41:26+00:00,2018-12-25 16:41:18+00:00,2018-12-25 16:41:18+00:00,False
6137e193cdcba2725f16de84eaf0db2b769d9668,238234877,427,closed,optimization #391,remove redundant code that remove support gorilla/context,2018-12-13 01:13:40+00:00,2018-12-17 14:42:52+00:00,2018-12-17 14:42:44+00:00,2018-12-17 14:42:44+00:00,False
d2b5d13b9260193b5a5649e9f47fda645bd2bd1d,237085108,425,closed,,Update and rename stale to stale.yml,2018-12-08 18:57:52+00:00,2018-12-08 20:40:58+00:00,2018-12-08 20:40:54+00:00,2018-12-08 20:40:54+00:00,False
419fd9fe2a07c30b927f0183d6a99408d187b812,236904973,424,closed,"Ref: https://github.com/apps/stale/

This will mark any issue without the `v2` or `needs-review` labels as stale after 60 days. It'll help with issue triage and (hopefully) motivate issue reporters to consider taking on the work directly.",Add stalebot config,2018-12-07 15:31:44+00:00,2018-12-07 16:56:20+00:00,2018-12-07 16:41:49+00:00,2018-12-07 16:41:49+00:00,False
758eb64354aa27cda6c1b026822c788cc755f06f,233349657,422,closed,"## problem
In #389, @fstanis highlighted an issue with routes branched off a subrouter not filtering by `Methods()` as intended; they wrote demonstrative tests in #390. 

I identified several more matchers which suffered the same problem. Specifically, if you invoke `Schemes()`, `Headers()`, ~or `Query()`~ **(edit: this is incorrect)** before invoking `Subrouter()`, your config is discarded for child routes. I have incorporated @fstanis' tests for `Methods()` and added a few more for the other three methods; all of the negative cases (`shouldMatch: false`) would currently fail on master. 

As far as I can tell, passing on these matchers isn't addressed in the code because I don't think this is necessarily the most likely use case for `Subrouter` (I imagine it was written to effectively avoid typing out certain hierarchical path prefices over and over, and it does so very expressively) but I do think it seems worth fixing. Consider that programmers might be using `Schemes(""https"")` to make a best effort to ensure that all requests over a given subrouter are via https, or `Headers(""User-Agent"", ""FooBar"")` to ensure that all endpoints under the subrouter fire only for certain user agents -- neither of those use cases would currently be met.

## proposal
The fix is to make the config actually be communicated via the subrouter. The current pattern for communicating config between parent and children routes has been the `parentRoute` interface. It has its advantages, but it is verbose and decentralizes the ""inheritance"" logic; to adopt it here would've required adding four new methods to the interface, satisfying them on both `Router` and `Route`, and largely duplicating the logic in each of those methods.

Instead, I suggest defining a common data structure (here named `routeConf`) for those properties which need to be passed on. I used an embedded struct here to keep the relative diff as small as possible. When calling `Route` or `Subrouter`, the struct is copied and passed on to the new child object. This centralizes the inheritance logic (effectively putting it in the `copyRouteConf` func) and guarantees that the values are carried over as the API suggests.

## notes
- To clearly highlight the behavioral change in this diff, I left intact some `parentRoute` usage that is now effectively obsolete. If this PR gets a tentative 👍from the powers that be, I'd like to go ahead and strip out some of that dead code.
- The `TestWalkSubrouters` test was modified to pass with the new logic; I think that the new behavior is actually the correct behavior. The old behavior appears inconsistent to me (the second `pathTemplate` includes its parent route, but the third and fourth don't include theirs), and `GetPathTemplate()` is most likely to be useful if it provides the whole path, not a partial. If I'm misunderstanding or we want to prioritize the backwards compatibility for this scenario, I can preserve the behavior.

Thanks!",Subroute configuration fixes,2018-11-25 01:18:11+00:00,2019-02-01 09:58:12+00:00,2018-12-07 15:48:27+00:00,2018-12-07 15:48:27+00:00,False
3d80bc801bb034e17cae38591335b3b1110f1c47,226914660,415,closed,related to #409 ,Use subtests in mux_test.go,2018-10-30 13:10:17+00:00,2018-10-30 15:25:29+00:00,2018-10-30 15:25:29+00:00,2018-10-30 15:25:29+00:00,False
521ea7b17d02faf8d3afea6737573942ceac59c5,225232004,412,closed,Go provides HTTP status codes as constants,Use constant for 301 status code in regexp.go,2018-10-24 00:50:17+00:00,2018-10-24 04:38:16+00:00,2018-10-24 02:08:01+00:00,2018-10-24 02:08:01+00:00,False
9e1f5955c0d22b55d9e20d6faa28589f83b2faca,212778998,402,closed,Only run vet on the latest Go version.,Always run on the latest stable Go version.,2018-09-03 15:25:21+00:00,2019-06-16 20:05:37+00:00,2018-09-03 15:43:06+00:00,2018-09-03 15:43:06+00:00,False
cf6680bc62d81bcd52bbf1c991bfe8b7ec98e270,212614583,399,closed,,Create release-drafter.yml,2018-09-02 22:24:31+00:00,2018-09-02 22:36:51+00:00,2018-09-02 22:36:46+00:00,2018-09-02 22:36:46+00:00,False
8771f97498c6be5fe95d2eb5fb882c18bbf7f361,200238544,391,closed,Remove gorilla/context for reasons outlined in issue #326.,Drop support for Go < 1.7: remove gorilla/context,2018-07-09 22:39:35+00:00,2018-09-02 22:22:41+00:00,2018-09-02 22:22:41+00:00,2018-09-02 22:22:41+00:00,False
962c5bed0721b50f2ba42684e9600dfde174770f,212093470,398,closed,,Add 1.11 to build in travis,2018-08-30 14:10:27+00:00,2018-08-30 14:23:35+00:00,2018-08-30 14:23:25+00:00,2018-08-30 14:23:25+00:00,False
cb4698366aa625048f3b815af6a0dea8aef9280a,192835120,386,closed,"If this looks good, I'll replicate across the other repos.

- I've kept the list of authors minimal - not to diminish the contributions of others, but because it's easier for contributors to add their names (if they so wish).
- The list is sorted.",Update LICENSE & AUTHORS files.,2018-06-05 21:01:43+00:00,2018-06-05 22:05:18+00:00,2018-06-05 21:15:57+00:00,2018-06-05 21:15:57+00:00,False
e0b5abaaae35242fa74372f26c24107711702a4e,186821350,371,closed,,Initialize user map,2018-05-09 05:32:39+00:00,2018-05-26 22:17:28+00:00,2018-05-26 22:17:22+00:00,2018-05-26 22:17:22+00:00,False
c85619274f5d55a67491010f883a91f568b3a9b0,187650450,376,closed,,[deps] Add go.mod for versioned Go,2018-05-13 03:24:37+00:00,2019-06-16 20:05:38+00:00,2018-05-17 17:36:24+00:00,2018-05-17 17:36:24+00:00,False
e3702bed27f0d39777b0b37b664b6280e8ef8fbf,187650215,375,closed,,"[docs] Improve docstrings for middleware, skipclean",2018-05-13 03:15:31+00:00,2018-05-13 03:22:37+00:00,2018-05-13 03:22:34+00:00,2018-05-13 03:22:34+00:00,False
fdeb7bc314fecece4e261b048f5fee1cb80208fe,187648973,374,closed,"The example in the README does not pass the request through a mux therefore the request variables from the path are never populated. Update the sample to create a minimum viable router to use.

Fixes #373",Doc fix for testing variables in path,2018-05-13 02:20:10+00:00,2018-05-13 14:24:57+00:00,2018-05-13 03:09:30+00:00,2018-05-13 03:09:30+00:00,False
5e55a4adb89fb64e8b13bbd302eeedac7a4ba5d8,183578979,366,closed,Implements the behavior discussed in #353 with @elithrar. I'm not sure if this is the best way to only match based on path only.,Add MethodMiddleware,2018-04-23 22:56:06+00:00,2018-05-12 01:30:48+00:00,2018-05-12 01:30:15+00:00,2018-05-12 01:30:15+00:00,False
ded0c29b24f96f46cf349e6701b099db601cf8ec,185111914,370,closed,,Fix linter issues (docs),2018-05-01 03:06:27+00:00,2018-05-13 03:16:23+00:00,2018-05-01 03:11:36+00:00,2018-05-01 03:11:36+00:00,False
b57cb1605fd11ba2ecfa7f68992b4b9cc791934d,181981616,364,closed,,[build] Update Go versions; add 1.10.x,2018-04-16 20:38:44+00:00,2018-04-16 20:45:24+00:00,2018-04-16 20:45:20+00:00,2018-04-16 20:45:20+00:00,False
94231ffd98496cbcb1c15b7bf2a9edfd5f852cd4,179178144,363,closed,"Prior to this change, the example documentation found in the README.md has an errant code which
won't work in the table-driven code example.

This change modifies the variable name from `t` to `tc` so it does not conflict with the `t *testing.T` struct definition.

* Adds a range clause to the `for` statement
* Modifies `for` statement scope to use `tc.shouldPass`, and `tc.routeVariable`

Doc: https://github.com/gorilla/mux#testing-handlers",Fix table-driven example documentation,2018-04-03 18:13:01+00:00,2018-04-03 18:23:31+00:00,2018-04-03 18:23:31+00:00,2018-04-03 18:23:31+00:00,False
4dbd923b0c9e99ff63ad54b0e9705ff92d3cdb06,174982885,355,closed,"Enables neater syntax when chaining several middleware functions:

``` go
router.Use(mwFunc1, mwFunc2, mwfunc3)
```

Fully backwards-compatible when using a single function as argument.",Make Use() variadic,2018-03-14 14:58:41+00:00,2018-03-14 16:31:39+00:00,2018-03-14 16:31:27+00:00,2018-03-14 16:31:26+00:00,False
07ba1fd60e210dc5cc6f86ec25dc9ecc7c95c295,171275675,350,closed,"I missed README file.

[related](https://github.com/gorilla/mux/pull/349)",Modify http status code to variable in README,2018-02-26 03:34:54+00:00,2018-02-26 05:11:56+00:00,2018-02-26 05:11:51+00:00,2018-02-26 05:11:51+00:00,False
d284fd84214eaf533d13ee880d2ab978ef81d7a2,171230102,349,closed,Go provides HTTP status codes as  const variables.,Modify 403 status code to const variable,2018-02-25 13:27:08+00:00,2018-02-25 16:09:00+00:00,2018-02-25 16:08:54+00:00,2018-02-25 16:08:54+00:00,False
c0091a029979286890368b4c7b301261e448e242,164112028,340,closed,For #339,Create authentication middleware example.,2018-01-20 05:19:23+00:00,2018-03-09 23:40:26+00:00,2018-01-20 07:58:20+00:00,2018-01-20 07:58:20+00:00,False
0fdf828bb28a79b519024e2e29915e851b73e580,164106538,335,closed,"Clarify in documentation that SetURLVars does not modify the given *htttp.Request, provide an example of usage.

Addresses #334 ",[docs] Clarify SetURLVars,2018-01-20 02:38:36+00:00,2018-01-20 06:28:50+00:00,2018-01-20 06:28:50+00:00,2018-01-20 06:28:50+00:00,False
077b44c2cf82958550c79f5885ee64900cdcee22,164110857,338,closed,"They actually return an error instead of an empty list. `GetMethods` happened to not return an error, but it should for consistency, so I added that as well.",Document route.Get* methods consistently,2018-01-20 04:42:17+00:00,2018-01-20 04:52:10+00:00,2018-01-20 04:51:42+00:00,2018-01-20 04:51:42+00:00,False
dc835075986d1932ee5495f32e3631770715fd6c,164110728,337,closed,"Fixes #323.

Also removed the duplicate ""listing routes"" example.","README.md: Improve ""walking routes"" example.",2018-01-20 04:38:30+00:00,2018-01-20 04:47:51+00:00,2018-01-20 04:47:48+00:00,2018-01-20 04:47:48+00:00,False
3dbb9ed96e4b25ec143f9d484ad5695179f10d47,164108047,336,closed,"README.md file , Graceful Shutdown demo code miss ""time"" package import

https://github.com/gorilla/mux/blob/master/README.md#graceful-shutdown","README.md: add miss ""time""",2018-01-20 03:18:40+00:00,2018-01-20 04:20:25+00:00,2018-01-20 04:20:17+00:00,2018-01-20 04:20:17+00:00,False
ad8790881febb89da2b487073a57e079fa4aaa6f,163776321,333,closed,Addresses https://github.com/gorilla/mux/pull/294#discussion_r162309666,[docs] Fix doc.go,2018-01-18 17:37:44+00:00,2018-01-18 17:54:01+00:00,2018-01-18 17:53:57+00:00,2018-01-18 17:53:57+00:00,False
69dae3b874ba34bcaa563d5e5b1680334bfd9b73,163324018,331,closed,Addresses a checkbox in https://github.com/gorilla/mux/issues/151,[docs] Add testing example,2018-01-17 00:40:33+00:00,2018-03-09 23:40:47+00:00,2018-01-17 07:16:36+00:00,2018-01-17 07:16:36+00:00,False
63c5c2f1f01d8151addc1b09edc9f39a8a217993,163342968,332,closed,,[docs] Fix Middleware docs typos,2018-01-17 03:27:15+00:00,2018-03-09 23:40:46+00:00,2018-01-17 07:16:07+00:00,2018-01-17 07:16:07+00:00,False
0b74e3d0fe68bbe7c66e693df167074f7f527e86,163296696,330,closed,Just making the graceful shutdown example copy paste-able ,Make shutdown docs compilable,2018-01-16 21:52:14+00:00,2018-01-16 22:43:48+00:00,2018-01-16 22:43:48+00:00,2018-01-16 22:43:48+00:00,False
53c1911da2b537f792e7cafcb446b05ffe33b996,140375101,294,closed,See discussion in #293 for more details.,Add middleware support as discussed in #293,2017-09-11 16:13:05+00:00,2018-02-01 11:02:29+00:00,2018-01-16 17:23:48+00:00,2018-01-16 17:23:48+00:00,False
5bbbb5b2b5729b132181cc7f4aa3b3c973e9a0ed,161469033,329,closed,"* Added a graceful shutdown example (was writing this for a project and figured I'd share)
* Fix indentation across the README.  ",[docs] Add graceful shutdown example,2018-01-06 06:44:46+00:00,2018-01-07 15:57:13+00:00,2018-01-07 15:57:09+00:00,2018-01-07 15:57:09+00:00,False
512169e5d707b96d6306216743bb7884a2b3a3c9,161244998,328,closed,"The existing options matchPrefix, matchHost, and matchQueries are
mutually exclusive so there's no point in having a separate boolean
argument for each one. It's clearer if there's a single type variable.

strictSlash and useEncodedPath were also being passed as naked bools so
I've wrapped these in a struct called routeRegexpOptions for more clarity
at the call site.","refactor routeRegexp, particularily newRouteRegexp.",2018-01-05 00:01:34+00:00,2018-03-09 23:40:27+00:00,2018-01-05 18:40:59+00:00,2018-01-05 18:40:59+00:00,False
5ab525f4fb1678e197ae59401e9050fa0b6cb5fd,156892805,322,closed,"As discussed in #233, it will be useful to have a test focused API to set URL params. Currently this is not possible because the route key type used to store the vars in the context is private and the setVars function is also private.

Currently there are two work arounds to address this, the first being to make pull the vars extraction up in to the middleware layer, which requires a significant refactor and the other is to spin up a server and running the request through a route to populate the context with the vars. The problem with this is that it's very heavy handed and for those running tests in hosted CI environments like travis, the extra bloat can slow down test execution potentially to the point where testing handlers no longer becomes viable.

This should allow for the testing of routes and route handlers to be done separately while also preserving the current level of indirection that has allowed for the underlying context implementation to be changed (as seen in this [PR](https://github.com/gorilla/mux/pull/169)).

The added public API end point is prefixed with ""Test"" and can be found in `testing.go` to emphasise that this is a utility specifically meant for testing rather than in normal program flow. This notion of testing as a public API is borrowed from this slide [Advanced Testing with Go](https://speakerdeck.com/mitchellh/advanced-testing-with-go?slide=53).

",Public test API to set URL params,2017-12-07 02:54:53+00:00,2017-12-08 16:08:16+00:00,2017-12-08 16:08:16+00:00,2017-12-08 16:08:16+00:00,False
7904d2e42e7ebbdb4a6eb3e57eb201b11df25c57,155975446,320,closed,"Implements the documentation aspect of #124.

Updates the documentation comment header for `route.go:Route.HeadersRegexp`. And also adds `example_route_test.go` containing:  
1. `ExampleRoute_HeadersRegexp`. Demonstrates the wildcard behavior of Go's `regexp.Compile`.
2. `ExampleRoute_HeadersRegexp_exactMatch`. Demonstrates strict matching using start and end of string anchors.",[docs] Add example usage for Route.HeadersRegexp,2017-12-01 22:51:50+00:00,2017-12-04 16:11:21+00:00,2017-12-04 16:11:15+00:00,2017-12-04 16:11:15+00:00,False
c572efe4294d5a0e354e01f2ddaa8b1f0c3cb3dd,156028301,321,closed,"* StrictSlash enabled routes return a 301 to the client
* As per the HTTP standards, non-idempotent methods, such as POST or PUT, will be followed with a GET by the client
* Users should use middleware if they wish to change this behaviour to return a HTTP 308.

Addresses https://github.com/gorilla/mux/issues/308",[docs] Note StrictSlash re-direct behaviour #308,2017-12-02 19:50:11+00:00,2017-12-02 20:39:29+00:00,2017-12-02 20:38:52+00:00,2017-12-02 20:38:52+00:00,False
65ec7248c53f499f6b480655e019e0b9d7a6ce11,155209691,318,closed,,Create ISSUE_TEMPLATE.md,2017-11-28 23:18:56+00:00,2017-11-29 00:00:14+00:00,2017-11-29 00:00:10+00:00,2017-11-29 00:00:10+00:00,False
4a3d4f3dd2a7b32b26dc262a143440e75767f94d,154863359,317,closed,"Fix handler match for subrouters created from method-matcher-based routes where the paths match (issue #300).

- Add a test case for routers with methods-based subrouters and matching paths
- Pass the test case with an addition to `Route.Match`
",[bugfix] Fix method subrouter handler matching (#300),2017-11-27 16:58:46+00:00,2017-11-28 20:49:57+00:00,2017-11-28 19:51:17+00:00,2017-11-28 19:51:17+00:00,False
2d5fef06b891c971b14aa6f71ca5ab6c03a36e0e,151555587,314,closed,https://github.com/gorilla/mux/pull/306 changed UseEncodedPath to use native go encoded path handling so cautions in it's docs are no longer applicable.,docs) fix outdated UseEncodedPath method docs,2017-11-09 03:46:48+00:00,2017-11-09 03:54:31+00:00,2017-11-09 03:54:03+00:00,2017-11-09 03:54:03+00:00,False
7f08801859139f86dfafd1c296e2cba9a80d292e,150596948,311,closed,"As discussed in #293, it should be useful if `RouteMatch.MatchErr` were set to an error if no match is found, even if some subrouters have a custom `NotFoundHandler`.",MatchErr is set to ErrNotFound if NotFoundHandler is used,2017-11-03 18:19:37+00:00,2017-11-05 19:32:38+00:00,2017-11-05 17:23:21+00:00,2017-11-05 17:23:21+00:00,False
9f48112f18a17f59ef17cfd7eea0d8c955504ebc,150705971,313,closed,The return values are getting confusing. Hopefully this helps.,Document router.Match,2017-11-05 03:31:20+00:00,2017-11-05 04:34:25+00:00,2017-11-05 04:08:26+00:00,2017-11-05 04:08:26+00:00,False
bc452d92e321dc63d7b1190f9627ecd950ef1899,150694257,312,closed,"Allow CI failures on tip (warn, don't error)",[build] Allow tip failures,2017-11-04 20:49:32+00:00,2017-11-04 20:51:31+00:00,2017-11-04 20:51:27+00:00,2017-11-04 20:51:27+00:00,False
c9183aaddd2672bdebcc2d2192ed9c788b4af1e8,147146769,306,closed,"This change drops support of go < 1.5. go1.4 has been [officially unsupported](https://golang.org/doc/devel/release.html#policy) since go1.6 was released 2016/02/17.

The PR was motivated by a bug I discovered, where `req.RequestURI` was returning `""""`, so my router was failing to route on the escaped path.

Very open to thoughts and/feedback on how to proceed. Thanks!",Use req.URL.EscapedPath() instead of getPath(req),2017-10-17 20:37:15+00:00,2017-10-20 03:46:21+00:00,2017-10-20 03:46:21+00:00,2017-10-20 03:46:21+00:00,False
10490f55fae320638e3418054ae58b3ab0ec2e98,145896484,304,closed,"Developers can now extract the query templates and regexps from a router as lists of combined query pairs.

## Description
The implementation returns lists of combined pairs of registered `Queries`; as templates or regexps. It was deemed more appropriate to return lists, at least for regexps, rather than a joined string of all combined pairs, since each query pair is considered a separate matcher, e.g., if we have the following: `Queries(""foo"", ""{v1}"", ""baz"", ""{v2}"")`, when joined using regexps we would end up with: `^foo=(?P<v0>.*)$,^baz=(?P<v0>.*)$`. The multiple `v0` entries might be confusing. For the query template, we could consider joining, but even then it will be a bit strange, e.g., `foo={v1},baz={v2}`.

## Motivation and Context
Being able to extract all parts of a registered route, including queries, can be very useful. In particular when generating REST API documentation. In addition, it can be useful to determine that tests have been written for all registered routes; by matching recorded and registered routes with their various parts.

## How Has This Been Tested (if appropriate)? 
Added `testQueriesRegexp` and `testQueriesTemplates` methods and added `queriesTemplate` and `queriesRegexp` fields to `routeTest`. All `TestQueries` cases are using this functionality.

## Types of changes
<!--- What types of changes does your code introduce? Put an 'x' in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)
- [ ] Refactoring (non-breaking changes, no bug fixing, no new features)
- [x] Testing (New unit/integration/performance tests)

## Checklist:
<!--- Go over all the following points, and put an 'x' in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] I have updated the documentation accordingly.
- [x] I have added tests to cover my changes.

## Related tickets or issues:
This resolves issue #287 ",[ISSUE-287] GetQueriesTemplates and GetQueriesRegexp extraction,2017-10-11 09:22:03+00:00,2017-10-20 01:20:11+00:00,2017-10-20 01:19:04+00:00,2017-10-20 01:19:04+00:00,False
9bd9ff2d1d2a0660d35050674f2c3112547997af,145732134,303,closed,,Added 1.9 build step,2017-10-10 15:51:12+00:00,2017-10-10 21:54:56+00:00,2017-10-10 21:54:56+00:00,2017-10-10 21:54:56+00:00,False
bdd5a5a1b0b489d297b73eb62b5f6328df198bfc,145341215,301,closed,"WriteHeader did only set status field for a local copy that was discarded
upon return.",Fix WriteHeader in TestA301ResponseWriter.,2017-10-08 16:07:06+00:00,2017-10-08 21:49:14+00:00,2017-10-08 21:49:13+00:00,2017-10-08 21:49:13+00:00,False
3f19343c7d9ce75569b952758bd236af94956061,142467960,297,closed,"Being able to depend on this order will make some of my applications easier to follow.

As far as I can tell, this describes the current behavior:
https://github.com/gorilla/mux/blob/24fca303ac6da784b9e8269f724ddeb0b2eea5e7/mux.go#L52-L53",Document evaluation order for routes,2017-09-21 23:29:00+00:00,2017-09-22 20:54:22+00:00,2017-09-22 20:54:15+00:00,2017-09-22 20:54:15+00:00,False
24fca303ac6da784b9e8269f724ddeb0b2eea5e7,139249745,292,closed,,README.md: add missing `.`,2017-09-05 06:59:31+00:00,2017-09-05 17:10:53+00:00,2017-09-05 17:10:44+00:00,2017-09-05 17:10:44+00:00,False
bb285ea687c5c77bb6935fdb2402b121d8efcbec,138525513,289,closed,,[docs] Fix missing space in docstring,2017-08-30 20:52:54+00:00,2017-09-01 14:41:47+00:00,2017-08-30 20:57:42+00:00,2017-08-30 20:57:42+00:00,False
a659b61323b075cb38ad03aa43749e52eb4948e0,136448299,288,closed,"This is my attempt to handle the Issue #271 . All existing tests are passing and I have added an additional test for current feature. 

This is my first major contribution to a big open source project. Please feel free to suggest any change. ",Fix #271:  Returning 405 instead of 404 when request has method mismatch with route,2017-08-18 10:27:48+00:00,2017-10-02 10:28:47+00:00,2017-08-30 05:39:18+00:00,2017-08-30 05:39:18+00:00,False
ac112f7d75a0714af1bd86ab17749b31f7809640,128387317,280,closed,Fix for #279.,Use scheme from parent router when building URLs.,2017-06-30 14:52:21+00:00,2017-07-04 21:07:43+00:00,2017-07-04 07:43:46+00:00,2017-07-04 07:43:46+00:00,False
37b3a6cace5ebe92c9b1494fab04d5e7767b271b,128387317,280,closed,Fix for #279.,Use scheme from parent router when building URLs.,2017-06-30 14:52:21+00:00,2017-07-04 21:07:43+00:00,2017-07-04 07:43:46+00:00,2017-07-04 07:43:46+00:00,False
8c683ee571b6ee7ffc9f1cafd13103c422e71cbf,126864740,277,closed,,Fix typo,2017-06-21 21:27:37+00:00,2017-06-21 22:07:36+00:00,2017-06-21 22:07:34+00:00,2017-06-21 22:07:34+00:00,False
18fca31550181693b3a834a15b74b564b3605876,123135729,270,closed,"This PR builds on and supersedes #230. It fixes #238 and #255.

* Rebased the two commits by @pamburus from #230 and resolved the conflicts.
* Updated README.md and the godocs to reflect the new functionality.
* Added a test for escaped query values, which duplicated #238.
* Added a fix for #238. The fix for that—changing the default pattern for query values from `[^?&]*` to `.*`—is safe because the Go standard library has already removed the semantically important `?` and `&` characters from the query string when parsing it into individual key/value pairs. The matching logic in `routeRegexp.matchQueryString` uses the regex to match already parsed and decoded query values returned by `routeRegexp.getURLQuery`.",Add support for queries in URL reversing.,2017-05-30 20:25:40+00:00,2017-06-29 20:18:17+00:00,2017-06-02 19:31:41+00:00,2017-06-02 19:31:41+00:00,False
c7a138dbc1778cafd4aaddb7ce7975a5f3649a49,123135729,270,closed,"This PR builds on and supersedes #230. It fixes #238 and #255.

* Rebased the two commits by @pamburus from #230 and resolved the conflicts.
* Updated README.md and the godocs to reflect the new functionality.
* Added a test for escaped query values, which duplicated #238.
* Added a fix for #238. The fix for that—changing the default pattern for query values from `[^?&]*` to `.*`—is safe because the Go standard library has already removed the semantically important `?` and `&` characters from the query string when parsing it into individual key/value pairs. The matching logic in `routeRegexp.matchQueryString` uses the regex to match already parsed and decoded query values returned by `routeRegexp.getURLQuery`.",Add support for queries in URL reversing.,2017-05-30 20:25:40+00:00,2017-06-29 20:18:17+00:00,2017-06-02 19:31:41+00:00,2017-06-02 19:31:41+00:00,False
f9aa23a02ba450e8ded2b1cb2ac8b4cd5a8bb123,123135729,270,closed,"This PR builds on and supersedes #230. It fixes #238 and #255.

* Rebased the two commits by @pamburus from #230 and resolved the conflicts.
* Updated README.md and the godocs to reflect the new functionality.
* Added a test for escaped query values, which duplicated #238.
* Added a fix for #238. The fix for that—changing the default pattern for query values from `[^?&]*` to `.*`—is safe because the Go standard library has already removed the semantically important `?` and `&` characters from the query string when parsing it into individual key/value pairs. The matching logic in `routeRegexp.matchQueryString` uses the regex to match already parsed and decoded query values returned by `routeRegexp.getURLQuery`.",Add support for queries in URL reversing.,2017-05-30 20:25:40+00:00,2017-06-29 20:18:17+00:00,2017-06-02 19:31:41+00:00,2017-06-02 19:31:41+00:00,False
9c9af153a18415409f478fe09658a3af59366515,123135729,270,closed,"This PR builds on and supersedes #230. It fixes #238 and #255.

* Rebased the two commits by @pamburus from #230 and resolved the conflicts.
* Updated README.md and the godocs to reflect the new functionality.
* Added a test for escaped query values, which duplicated #238.
* Added a fix for #238. The fix for that—changing the default pattern for query values from `[^?&]*` to `.*`—is safe because the Go standard library has already removed the semantically important `?` and `&` characters from the query string when parsing it into individual key/value pairs. The matching logic in `routeRegexp.matchQueryString` uses the regex to match already parsed and decoded query values returned by `routeRegexp.getURLQuery`.",Add support for queries in URL reversing.,2017-05-30 20:25:40+00:00,2017-06-29 20:18:17+00:00,2017-06-02 19:31:41+00:00,2017-06-02 19:31:41+00:00,False
043ee6597c29786140136a5747b6a886364f5282,122121988,269,closed,"In the ""Listing Routes"" example code, `.HandleFunc` was being called on a `*mux.Route` rather than `*mux.Router`. Updated the example code to work.",Fix invalid example code,2017-05-24 00:21:03+00:00,2017-05-24 01:34:25+00:00,2017-05-24 01:01:05+00:00,2017-05-24 01:01:05+00:00,False
59ce66852b697ee9168e885e69857d678847633d,122121988,269,closed,"In the ""Listing Routes"" example code, `.HandleFunc` was being called on a `*mux.Route` rather than `*mux.Router`. Updated the example code to work.",Fix invalid example code,2017-05-24 00:21:03+00:00,2017-05-24 01:34:25+00:00,2017-05-24 01:01:05+00:00,2017-05-24 01:01:05+00:00,False
85b8c203a414fa3650401cd5c6aa926dd1e275d9,121881848,268,closed,"Looks like there was just part of a conflict marker in the README file, so I figured I'd remove it.",Removing half of conflict marker,2017-05-22 22:56:25+00:00,2017-05-23 02:46:13+00:00,2017-05-23 02:46:13+00:00,2017-05-23 02:46:13+00:00,False
456bcfa82d672db7cae587c9b541463f65bc2718,121556300,264,closed,Fixes #263,Update ancestors parameter for WalkFunc for matcher subrouters,2017-05-19 18:24:11+00:00,2017-05-22 15:17:50+00:00,2017-05-22 15:17:49+00:00,2017-05-22 15:17:49+00:00,False
4d814f7650d4fb90c7f13da96d37831f6c11f86e,121556300,264,closed,Fixes #263,Update ancestors parameter for WalkFunc for matcher subrouters,2017-05-19 18:24:11+00:00,2017-05-22 15:17:50+00:00,2017-05-22 15:17:49+00:00,2017-05-22 15:17:49+00:00,False
a322b2c2ecff2decd1b67fe1fa472ad779e9ae0f,121558457,265,closed,"Matches all routes instead of just routes with paths.

Fixes #261",Update Walk to match all subrouters,2017-05-19 18:36:28+00:00,2017-05-21 21:35:08+00:00,2017-05-21 21:35:08+00:00,2017-05-21 21:35:08+00:00,False
bcd8bc72b08df0f70df986b97f95590779502d31,121369332,260,closed,"- Capture first scheme configured for a route for use when building URLs.
- Add new Route.URLScheme method similar to URLHost and URLPath.
- Update Route.URLHost and Route.URL to use the captured scheme if present.

Fixes #13. Supersedes #161. ",Support building URLs with non-http schemes.,2017-05-18 20:21:03+00:00,2017-05-21 12:38:06+00:00,2017-05-21 04:50:13+00:00,2017-05-21 04:50:13+00:00,False
751308a60a84015f1232e8aa1fa7f4f4ecb2dd0f,111326643,244,closed,"Add method `GetPathRegexp`  which returns original regex for path.
Add method `GetMethods` which returns all available methods for path.",Get extra information about a route for a documentation ,2017-03-17 17:14:18+00:00,2017-05-22 18:47:58+00:00,2017-05-20 22:55:47+00:00,2017-05-20 22:55:47+00:00,False
b552615e22224a497dda4bae89940eeb05c0cd53,111326643,244,closed,"Add method `GetPathRegexp`  which returns original regex for path.
Add method `GetMethods` which returns all available methods for path.",Get extra information about a route for a documentation ,2017-03-17 17:14:18+00:00,2017-05-22 18:47:58+00:00,2017-05-20 22:55:47+00:00,2017-05-20 22:55:47+00:00,False
1856953e530eab2cb8793c42c7e9c1e6b1dc2709,111326643,244,closed,"Add method `GetPathRegexp`  which returns original regex for path.
Add method `GetMethods` which returns all available methods for path.",Get extra information about a route for a documentation ,2017-03-17 17:14:18+00:00,2017-05-22 18:47:58+00:00,2017-05-20 22:55:47+00:00,2017-05-20 22:55:47+00:00,False
4c1c3952b7d9d0a061a3fa7b36fd373ba0398ebc,117804890,250,closed,,fixed typo,2017-04-26 20:40:33+00:00,2017-04-27 11:55:55+00:00,2017-04-27 04:12:51+00:00,2017-04-27 04:12:51+00:00,False
599cba5e7b6137d46ddf58fb1765f5d928e69604,108013756,234,closed,Fixing Regexp in the benchmark test,Fixing small bug in the benchmark test,2017-02-26 17:39:42+00:00,2017-02-28 22:43:58+00:00,2017-02-28 22:43:54+00:00,2017-02-28 22:43:54+00:00,False
ad4ce0eb1694e1a48fd8e2e764dd0e1aec118326,108248672,235,closed,"Fixed the unclear logic that was discussed in https://github.com/gorilla/mux/pull/215 comment:
https://github.com/gorilla/mux/pull/215#issuecomment-282473563

I'm not sure if extra tests are needed here, but if they are let me know so I can add them.
","updating logic in route matcher, cleaner and saner",2017-02-28 02:59:14+00:00,2017-02-28 03:45:04+00:00,2017-02-28 03:44:50+00:00,2017-02-28 03:44:50+00:00,False
999ef73f5d50979cf6d12afed1726325b63f9570,107700424,232,closed,Fixes #228,Add sourcegraph badge,2017-02-23 19:57:34+00:00,2017-02-23 20:25:55+00:00,2017-02-23 20:25:55+00:00,2017-02-23 20:25:55+00:00,False
89d16fe9a0996a117f467bf04085b1660398a418,107700424,232,closed,Fixes #228,Add sourcegraph badge,2017-02-23 19:57:34+00:00,2017-02-23 20:25:55+00:00,2017-02-23 20:25:55+00:00,2017-02-23 20:25:55+00:00,False
392c28fe23e1c45ddba891b0320b3b5df220beea,101956002,218,closed,,"Fix issue 200, fail fast if regex is incorrectly specified using capturing groups",2017-01-17 22:00:59+00:00,2017-01-18 21:56:06+00:00,2017-01-18 13:43:45+00:00,2017-01-18 13:43:45+00:00,False
cafdb65e9ebf0275ed34de6b54f316e440a756bb,101821097,217,closed,,Update README.md,2017-01-17 09:01:39+00:00,2017-01-18 13:43:24+00:00,2017-01-18 13:43:24+00:00,2017-01-18 13:43:24+00:00,False
b12896167c61cb7a17ee5f15c2ba0729d78793db,87538219,199,closed,"(this confused the heck out of me while trying to use Gorilla)
- Changed `request` to be just `r`, like the other handlers.
- Created complete wrapper function instead of just 2 lines.
",Clarify how route variables work. (#151),2016-09-30 17:57:33+00:00,2017-01-17 07:01:08+00:00,2017-01-17 07:01:08+00:00,2017-01-17 07:01:08+00:00,False
34dda716af12ba79ed40ce1f66b102ff75dc3411,101633330,215,closed,"This should fix https://github.com/gorilla/mux/issues/79. 
Looking for feedback! ",Adding in a check for routes with just /,2017-01-16 05:50:23+00:00,2017-02-26 20:31:15+00:00,2017-01-17 06:41:12+00:00,2017-01-17 06:41:12+00:00,False
b9ff34f617bc0e162f0ebc5f4902303b4ac4889e,101633330,215,closed,"This should fix https://github.com/gorilla/mux/issues/79. 
Looking for feedback! ",Adding in a check for routes with just /,2017-01-16 05:50:23+00:00,2017-02-26 20:31:15+00:00,2017-01-17 06:41:12+00:00,2017-01-17 06:41:12+00:00,False
293ebe14936bf5aa585139c72ea2f28d4164f984,101633330,215,closed,"This should fix https://github.com/gorilla/mux/issues/79. 
Looking for feedback! ",Adding in a check for routes with just /,2017-01-16 05:50:23+00:00,2017-02-26 20:31:15+00:00,2017-01-17 06:41:12+00:00,2017-01-17 06:41:12+00:00,False
910dd3aa3181e73b3605b92f5db7768a460721c1,87538219,199,closed,"(this confused the heck out of me while trying to use Gorilla)
- Changed `request` to be just `r`, like the other handlers.
- Created complete wrapper function instead of just 2 lines.
",Clarify how route variables work. (#151),2016-09-30 17:57:33+00:00,2017-01-17 07:01:08+00:00,2017-01-17 07:01:08+00:00,2017-01-17 07:01:08+00:00,False
239e05fe53b524b5e5cbccd56d6963a31094822f,87538219,199,closed,"(this confused the heck out of me while trying to use Gorilla)
- Changed `request` to be just `r`, like the other handlers.
- Created complete wrapper function instead of just 2 lines.
",Clarify how route variables work. (#151),2016-09-30 17:57:33+00:00,2017-01-17 07:01:08+00:00,2017-01-17 07:01:08+00:00,2017-01-17 07:01:08+00:00,False
757bef944d0f21880861c2dd9c871ca543023cba,85982557,196,closed,,document non-capturing groups (closes #143),2016-09-20 14:07:58+00:00,2016-09-20 23:08:47+00:00,2016-09-20 23:08:13+00:00,2016-09-20 23:08:13+00:00,False
14f5df0128b7c89faab437c00d0ea98fb56e03a0,85982557,196,closed,,document non-capturing groups (closes #143),2016-09-20 14:07:58+00:00,2016-09-20 23:08:47+00:00,2016-09-20 23:08:13+00:00,2016-09-20 23:08:13+00:00,False
0a192a193177452756c362c20087ddafcf6829c4,83326897,190,closed,"As discussed in #184 
",Add useEncodedPath option to router and routes,2016-08-30 18:56:18+00:00,2016-09-02 15:33:43+00:00,2016-09-02 15:33:43+00:00,2016-09-02 15:33:43+00:00,False
0b13a922203ebdbfd236c818efcd5ed46097d690,81620503,185,closed,"The current implementation was failing in a case where there are two route vars right next to each other and the second one matched the empty string. Because of that, `prevEnd < matches[i+1]` evaluated to `false` and the matches got assigned to the wrong names.

Having a capturing regexp group in a route pattern is never useful. This commit changes the tests accordingly. Another option would be to automatically turn capturing groups into non-capturing ones (adding the `?:` automatically).
","Simplify extractVars, fixes edge cases.",2016-08-17 10:41:59+00:00,2016-08-27 16:50:44+00:00,2016-08-27 16:50:34+00:00,2016-08-27 16:50:34+00:00,False
34bf6dc9faa08144e925df4fa1838551b16d6c2a,82572099,189,closed,"This PR fixes a panic introduces by PR https://github.com/gorilla/mux/pull/184 that manifests within Google App Engine. For more information about the underlying problem, see issue https://github.com/gorilla/mux/issues/188.

Basically, certain assumptions about the value of `RequestURI` don't hold within the App Engine sandbox environment.
","Make the new getPath method safer, fixing panics within App Engine",2016-08-24 16:09:40+00:00,2016-08-25 12:38:22+00:00,2016-08-24 23:34:02+00:00,2016-08-24 23:34:02+00:00,False
674ef1c28022f33fa7200f59db45e604557f0380,81490875,184,closed,,Add mechanism to route based on the escaped path,2016-08-16 15:20:00+00:00,2016-08-30 19:14:10+00:00,2016-08-24 13:45:17+00:00,2016-08-24 13:45:17+00:00,False
780415097119f6f61c55475fe59b66f3c3e9ea53,79591604,180,closed,,[docs] Add logo to README.,2016-08-01 15:52:57+00:00,2016-08-01 17:00:48+00:00,2016-08-01 17:00:46+00:00,2016-08-01 17:00:46+00:00,False
3b15f12d155ae3bd4cc34b6919054b0b71bceed9,79588388,179,closed,"Addresses the static file serving docs in https://github.com/gorilla/mux/issues/151
",[docs] Add static file example to README; doc.go.,2016-08-01 15:33:52+00:00,2016-08-01 15:51:16+00:00,2016-08-01 15:51:14+00:00,2016-08-01 15:51:14+00:00,False
a49d62f618e6dc4a7a7d1f0ad69744a158c21f23,78708500,177,closed,"In old version error was not returned properly, In one walkFn call
error was checked only for SkipRouter but not for nil.
",Fix error handling in  Router.Walk,2016-07-25 16:07:48+00:00,2016-07-27 01:54:17+00:00,2016-07-27 01:54:17+00:00,2016-07-27 01:54:17+00:00,False
cf57124f1d4afc95248c663c559ef789ee099087,78708500,177,closed,"In old version error was not returned properly, In one walkFn call
error was checked only for SkipRouter but not for nil.
",Fix error handling in  Router.Walk,2016-07-25 16:07:48+00:00,2016-07-27 01:54:17+00:00,2016-07-27 01:54:17+00:00,2016-07-27 01:54:17+00:00,False
d391bea3118c9fc17a88d62c9189bb791255e0ef,77761645,175,closed,"remove the redundant right parenthesis
",fix README.md,2016-07-18 05:40:41+00:00,2016-07-18 15:11:59+00:00,2016-07-18 15:11:59+00:00,2016-07-18 15:11:59+00:00,False
198f95d82475f2355940a96859f8b51a140ff86f,77761645,175,closed,"remove the redundant right parenthesis
",fix README.md,2016-07-18 05:40:41+00:00,2016-07-18 15:11:59+00:00,2016-07-18 15:11:59+00:00,2016-07-18 15:11:59+00:00,False
9fa818a44c2bf1396a17f9d5a3c0f6dd39d2ff8e,72643892,170,closed,"Ref https://github.com/gorilla/mux/commit/12a13f34e4fd6f7c8cbd499c446bded8d09ad8ad#commitcomment-17371551
",[ci] Update .travis-ci to skip install block.,2016-06-05 23:28:56+00:00,2016-06-05 23:35:53+00:00,2016-06-05 23:35:21+00:00,2016-06-05 23:35:21+00:00,False
e84fac997f7f9015ca0c5a35bf0e7922070c98cb,72597208,169,closed,"Fixes https://github.com/gorilla/mux/issues/168

This should be backwards compatible, since the usage of gorilla/context was an implementation detail and not exposed publicly.

When go1.7+ is used, the native [context.Context](https://tip.golang.org/pkg/net/http/#Request.Context) object on the http.Request will be used. On older version of go, gorilla/context will be used.
",Store vars and route in context.Context when go1.7+ is used,2016-06-04 08:43:14+00:00,2016-07-30 00:13:18+00:00,2016-06-04 16:35:56+00:00,2016-06-04 16:35:56+00:00,False
fdfca9f9173962ed22bc63adc02a1589e43c1405,72597208,169,closed,"Fixes https://github.com/gorilla/mux/issues/168

This should be backwards compatible, since the usage of gorilla/context was an implementation detail and not exposed publicly.

When go1.7+ is used, the native [context.Context](https://tip.golang.org/pkg/net/http/#Request.Context) object on the http.Request will be used. On older version of go, gorilla/context will be used.
",Store vars and route in context.Context when go1.7+ is used,2016-06-04 08:43:14+00:00,2016-07-30 00:13:18+00:00,2016-06-04 16:35:56+00:00,2016-06-04 16:35:56+00:00,False
5dd56998c22c824ad2e13c50bc3213e85b125134,72597208,169,closed,"Fixes https://github.com/gorilla/mux/issues/168

This should be backwards compatible, since the usage of gorilla/context was an implementation detail and not exposed publicly.

When go1.7+ is used, the native [context.Context](https://tip.golang.org/pkg/net/http/#Request.Context) object on the http.Request will be used. On older version of go, gorilla/context will be used.
",Store vars and route in context.Context when go1.7+ is used,2016-06-04 08:43:14+00:00,2016-07-30 00:13:18+00:00,2016-06-04 16:35:56+00:00,2016-06-04 16:35:56+00:00,False
bd09be08ed4377796d312df0a45314e11b8f5dc1,71394896,165,closed,"As someone new to Go and still learning Go idioms, I spent a little bit too long diagnose why
the `ListenAndServe` call wasn't blocking. The reason is returned as an error but the full example in the README does not log the return value. My reason was port 8000 was occupied on my machine.

The examples [here](https://golang.org/pkg/net/http/) wrap `ListenAndServe` in `log.Fatal` so I'm guessing this is an idiom.

Might save someone a few mins of scratching their head, particularly if they're new to Go, like me.
",Log ListenAndServe's err response in Full Example,2016-05-25 13:52:10+00:00,2016-05-25 14:09:14+00:00,2016-05-25 14:09:13+00:00,2016-05-25 14:09:13+00:00,False
0d753bb8ca03e2ff6017f7a82e3dd56187cd28d6,71394896,165,closed,"As someone new to Go and still learning Go idioms, I spent a little bit too long diagnose why
the `ListenAndServe` call wasn't blocking. The reason is returned as an error but the full example in the README does not log the return value. My reason was port 8000 was occupied on my machine.

The examples [here](https://golang.org/pkg/net/http/) wrap `ListenAndServe` in `log.Fatal` so I'm guessing this is an idiom.

Might save someone a few mins of scratching their head, particularly if they're new to Go, like me.
",Log ListenAndServe's err response in Full Example,2016-05-25 13:52:10+00:00,2016-05-25 14:09:14+00:00,2016-05-25 14:09:13+00:00,2016-05-25 14:09:13+00:00,False
9c19ed558d5df4da88e2ade9c8940d742aef0e7e,61969350,154,closed,"This PR rebases https://github.com/gorilla/mux/pull/54 on the latest master. Most works were done by @whatupdave.

/cc @elithrar
",Add SkipClean option,2016-03-07 19:45:47+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,False
12a13f34e4fd6f7c8cbd499c446bded8d09ad8ad,61969350,154,closed,"This PR rebases https://github.com/gorilla/mux/pull/54 on the latest master. Most works were done by @whatupdave.

/cc @elithrar
",Add SkipClean option,2016-03-07 19:45:47+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,False
05d9d908e791c45f6deff3ea85fd6fd3a340a4c7,61969350,154,closed,"This PR rebases https://github.com/gorilla/mux/pull/54 on the latest master. Most works were done by @whatupdave.

/cc @elithrar
",Add SkipClean option,2016-03-07 19:45:47+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,False
9935257381196ec7a0d4fd92fa0f61f24cd014bc,61969350,154,closed,"This PR rebases https://github.com/gorilla/mux/pull/54 on the latest master. Most works were done by @whatupdave.

/cc @elithrar
",Add SkipClean option,2016-03-07 19:45:47+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,False
a41434aac388acdf2aa28ba41cde5cd998feedd3,61969350,154,closed,"This PR rebases https://github.com/gorilla/mux/pull/54 on the latest master. Most works were done by @whatupdave.

/cc @elithrar
",Add SkipClean option,2016-03-07 19:45:47+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,False
8e05c69b5a3a77a2eafb48df5f230250d2752718,63295737,158,closed,"const DefaultRemoteAddr is unused in old_test.
",old_test: const DefaultRemoteAddr is unused.,2016-03-17 21:29:09+00:00,2016-03-17 21:35:24+00:00,2016-03-17 21:34:30+00:00,2016-03-17 21:34:30+00:00,False
65c2651643a9eb5438d10f1c492ba892fe96244f,61985744,155,closed,"Changes in https://github.com/gorilla/mux/pull/144 broke regexp matching for case insensitive groups. 

This adds a test scenario and a small hunk of code reverted to what it was prior to the PR.
",Allowing case insensitive regexp groups after PR #144,2016-03-07 21:43:12+00:00,2016-03-07 22:01:44+00:00,2016-03-07 22:01:44+00:00,2016-03-07 22:01:44+00:00,False
786d36e5ab042d67efe94022439cf6c91ee711dc,61969350,154,closed,"This PR rebases https://github.com/gorilla/mux/pull/54 on the latest master. Most works were done by @whatupdave.

/cc @elithrar
",Add SkipClean option,2016-03-07 19:45:47+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,False
8ac5cf967fbadf2522625826070379e0fd6e2f98,61969350,154,closed,"This PR rebases https://github.com/gorilla/mux/pull/54 on the latest master. Most works were done by @whatupdave.

/cc @elithrar
",Add SkipClean option,2016-03-07 19:45:47+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,2016-05-02 17:56:24+00:00,False
f7ac7251e3b615c63207d481413aab0726812499,39498612,104,closed,"to make it easier to generate a API page that lists all routes by template

This works well with https://github.com/gorilla/mux/pull/83 so you can do something like

`````` go
func Index(router *mux.Router) *index {
    return &index{router}
}

type index struct {
    router *mux.Router
}

func (h *index) ServeHTTP(rw http.ResponseWriter, req *http.Request) {
    h.router.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {
        path, _ := route.URLPathTemplate()
        fmt.Fprintf(rw, ""%s\n"", path)
        return nil
    })
}```
``````
",Add URLPathTemplate to Route …,2015-07-08 16:50:50+00:00,2016-03-05 22:20:54+00:00,2016-03-05 13:56:38+00:00,2016-03-05 13:56:38+00:00,False
02c98b3f736c94c45d11bef7b60023f752c2d21d,61023575,150,closed,"- SkipRouter should also be ErrRouterSkipped (or similar) but a change would
  break the public API.
",[docs] Satisfied golint.,2016-02-29 03:33:13+00:00,2016-02-29 03:40:57+00:00,2016-02-29 03:40:56+00:00,2016-02-29 03:40:56+00:00,False
f84ab9ab620f5ac2d587d5688b7b0820b5bdf9bf,39498612,104,closed,"to make it easier to generate a API page that lists all routes by template

This works well with https://github.com/gorilla/mux/pull/83 so you can do something like

`````` go
func Index(router *mux.Router) *index {
    return &index{router}
}

type index struct {
    router *mux.Router
}

func (h *index) ServeHTTP(rw http.ResponseWriter, req *http.Request) {
    h.router.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {
        path, _ := route.URLPathTemplate()
        fmt.Fprintf(rw, ""%s\n"", path)
        return nil
    })
}```
``````
",Add URLPathTemplate to Route …,2015-07-08 16:50:50+00:00,2016-03-05 22:20:54+00:00,2016-03-05 13:56:38+00:00,2016-03-05 13:56:38+00:00,False
0d60c4bfebed9448afb78ab65727a497cc2d9f3d,39498612,104,closed,"to make it easier to generate a API page that lists all routes by template

This works well with https://github.com/gorilla/mux/pull/83 so you can do something like

`````` go
func Index(router *mux.Router) *index {
    return &index{router}
}

type index struct {
    router *mux.Router
}

func (h *index) ServeHTTP(rw http.ResponseWriter, req *http.Request) {
    h.router.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {
        path, _ := route.URLPathTemplate()
        fmt.Fprintf(rw, ""%s\n"", path)
        return nil
    })
}```
``````
",Add URLPathTemplate to Route …,2015-07-08 16:50:50+00:00,2016-03-05 22:20:54+00:00,2016-03-05 13:56:38+00:00,2016-03-05 13:56:38+00:00,False
16507e2c476babc0abccdb1ed84165067c492361,39498612,104,closed,"to make it easier to generate a API page that lists all routes by template

This works well with https://github.com/gorilla/mux/pull/83 so you can do something like

`````` go
func Index(router *mux.Router) *index {
    return &index{router}
}

type index struct {
    router *mux.Router
}

func (h *index) ServeHTTP(rw http.ResponseWriter, req *http.Request) {
    h.router.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {
        path, _ := route.URLPathTemplate()
        fmt.Fprintf(rw, ""%s\n"", path)
        return nil
    })
}```
``````
",Add URLPathTemplate to Route …,2015-07-08 16:50:50+00:00,2016-03-05 22:20:54+00:00,2016-03-05 13:56:38+00:00,2016-03-05 13:56:38+00:00,False
5f42f0f524cc51ac5f74cdedf0298bed528981f2,61005217,149,closed,,[docs] Add http://www.gorillatoolkit.org/pkg/mux to README.,2016-02-28 20:26:25+00:00,2016-02-28 20:30:00+00:00,2016-02-28 20:29:58+00:00,2016-02-28 20:29:58+00:00,False
7872f90afae404a743afc2e74ef5e21797879951,60906190,148,closed,,Update .travis.yml to build Go 1.6,2016-02-26 21:23:42+00:00,2016-02-26 21:29:40+00:00,2016-02-26 21:29:39+00:00,2016-02-26 21:29:39+00:00,False
78fb8eb962166e2ed581b9e30619fc353d2758b3,57004686,144,closed,"This is an alternative way to fix #62 . Current fix uses named groups and access matches via SubexpNames. Alternative is to wrap regexp expressions in normal groups iff whole expression is not already in a group. To access only mux provided group matches it is enough to use non overlapping ranges from FindStringSubmatchIndex. Adding 2 benchamrks shows runtime speedup and decreased allocations:

```
benchmark                             old ns/op     new ns/op     delta
BenchmarkMux-4                        4916          4179          -14.99%
BenchmarkMuxAlternativeInRegexp-4     7817          6198          -20.71%
BenchmarkManyPathVariables-4          9885          8625          -12.75%

benchmark                             old allocs     new allocs     delta
BenchmarkMux-4                        11             8              -27.27%
BenchmarkMuxAlternativeInRegexp-4     22             16             -27.27%
BenchmarkManyPathVariables-4          23             12             -47.83%

benchmark                             old bytes     new bytes     delta
BenchmarkMux-4                        832           768           -7.69%
BenchmarkMuxAlternativeInRegexp-4     1728          1536          -11.11%
BenchmarkManyPathVariables-4          1223          967           -20.93%
```

[old.txt](https://github.com/gorilla/mux/files/102369/old.txt)
[new.txt](https://github.com/gorilla/mux/files/102370/new.txt)
",Alternative fix for #62 with speedup,2016-01-24 14:44:28+00:00,2016-03-07 22:02:07+00:00,2016-02-28 20:22:47+00:00,2016-02-28 20:22:47+00:00,False
f48927253fa183f81eda684da508ba9226b87e9f,57004686,144,closed,"This is an alternative way to fix #62 . Current fix uses named groups and access matches via SubexpNames. Alternative is to wrap regexp expressions in normal groups iff whole expression is not already in a group. To access only mux provided group matches it is enough to use non overlapping ranges from FindStringSubmatchIndex. Adding 2 benchamrks shows runtime speedup and decreased allocations:

```
benchmark                             old ns/op     new ns/op     delta
BenchmarkMux-4                        4916          4179          -14.99%
BenchmarkMuxAlternativeInRegexp-4     7817          6198          -20.71%
BenchmarkManyPathVariables-4          9885          8625          -12.75%

benchmark                             old allocs     new allocs     delta
BenchmarkMux-4                        11             8              -27.27%
BenchmarkMuxAlternativeInRegexp-4     22             16             -27.27%
BenchmarkManyPathVariables-4          23             12             -47.83%

benchmark                             old bytes     new bytes     delta
BenchmarkMux-4                        832           768           -7.69%
BenchmarkMuxAlternativeInRegexp-4     1728          1536          -11.11%
BenchmarkManyPathVariables-4          1223          967           -20.93%
```

[old.txt](https://github.com/gorilla/mux/files/102369/old.txt)
[new.txt](https://github.com/gorilla/mux/files/102370/new.txt)
",Alternative fix for #62 with speedup,2016-01-24 14:44:28+00:00,2016-03-07 22:02:07+00:00,2016-02-28 20:22:47+00:00,2016-02-28 20:22:47+00:00,False
66181ed3371dcbff358575eff5e41efc013608d8,54869872,141,closed,"- Changed Travis CI Badge from PNG to SVG
- Added Missing Code Blocks
- Added Golang Syntax Highlighting to Corresponding Code Blocks
",Update README.md,2015-12-31 16:15:59+00:00,2015-12-31 16:19:10+00:00,2015-12-31 16:19:08+00:00,2015-12-31 16:19:08+00:00,False
82a9c170d40582ee65ff8af081485e5e325fb4a0,54593004,139,closed,"| Issue #20 | `Router.NotFoundHandler` is not used when the router is a subrouter |
| :-- | :-- |
| Solution | Move ""Not found"" logic into `Match` function. |
| Status | Awaiting Reviewers |

This small code move should allow the ""deepest"" sub-router to respond with it's `NotFoundHandler`, thanks to the recursive nature of `Match`.  As this is my first pull to this repository, I expect there to be more steps to make this change than the code fix alone.  If a repository administrator leaves a comment on what else is necessary to merge to the repository, I will be happy to comply.
",`Router.NotFoundHandler` is not used when the router is a subrouter,2015-12-25 20:29:36+00:00,2016-01-08 19:43:06+00:00,2015-12-29 06:32:19+00:00,2015-12-29 06:32:19+00:00,False
c329c7d193285eb0aeac7892896766be20a84c4c,54593004,139,closed,"| Issue #20 | `Router.NotFoundHandler` is not used when the router is a subrouter |
| :-- | :-- |
| Solution | Move ""Not found"" logic into `Match` function. |
| Status | Awaiting Reviewers |

This small code move should allow the ""deepest"" sub-router to respond with it's `NotFoundHandler`, thanks to the recursive nature of `Match`.  As this is my first pull to this repository, I expect there to be more steps to make this change than the code fix alone.  If a repository administrator leaves a comment on what else is necessary to merge to the repository, I will be happy to comply.
",`Router.NotFoundHandler` is not used when the router is a subrouter,2015-12-25 20:29:36+00:00,2016-01-08 19:43:06+00:00,2015-12-29 06:32:19+00:00,2015-12-29 06:32:19+00:00,False
9a9f155278d9b29c53acbb38c89b3024f658b55d,50077126,134,closed,"This change augments the Travis CI build to perform:
- Check that all files follow gofmt style, including -s (simplify) option.
- Check that go vet does not report any problems.
- Use race detector when running tests, to ensure there are no data races found.

Doing this will help catch issues like in #133 at the time the change is made, automatically.
","Travis: Perform gofmt, go vet checks; use race detector during tests.",2015-11-09 01:31:05+00:00,2015-11-11 10:44:31+00:00,2015-11-11 10:35:30+00:00,2015-11-11 10:35:30+00:00,False
a90bbbc6fa11b6a5c4ad95c2ab27eb51229890a5,50053184,133,closed,"% go vet
mux_test.go:1080: arg len(ancestors) for printf verb %s of wrong type:
int
",Correct a printf verb type,2015-11-08 05:05:33+00:00,2015-11-08 05:17:00+00:00,2015-11-08 05:16:49+00:00,2015-11-08 05:16:49+00:00,False
ac3897eae3767628df9a43b55c53fca226870a27,46701441,128,closed,"Fix a typo in the comment docs, add a few more.
",Typo and Docs,2015-10-03 07:22:31+00:00,2015-10-03 07:26:52+00:00,2015-10-03 07:26:52+00:00,2015-10-03 07:26:51+00:00,False
8ae7a23e03967d170fbd699eaf8e55883b99e94b,44421343,125,closed,"Legacy commits were made in previous PR. Fixed the documentation in mini commit.
",Fixed documentation from Issue 16,2015-09-08 11:33:26+00:00,2015-09-08 16:58:44+00:00,2015-09-08 16:58:39+00:00,2015-09-08 16:58:39+00:00,False
e45852e5374d4b40feb756a967c21a758fca25b1,42460958,122,closed,"Addresses #121.
",Fixed GoDoc badge.,2015-08-14 14:25:47+00:00,2015-08-14 14:29:22+00:00,2015-08-14 14:29:16+00:00,2015-08-14 14:29:16+00:00,False
d17b93cab89c2fe13ef8292fdefb116d86666e75,42086194,120,closed,"I was using hyphenated names for path variables and they had been working well before the commit 8965bfef36e398a40fa4afbe4e22eea61cb8db86.
But after the commit was pushed, hyphenated variables names cause a regexp syntax error and it is causing a problem to me.

I believe that mux should keep the support of such variable names, hence I made some changes to achieve it.
I'd appreciate it if my changes could be accepted.

If the naming convention was intentionally revised, my changes can be ignored but it is really helpful to document the naming convention somewhere in README.md instead.
",Reduce variable name restriction,2015-08-11 02:08:56+00:00,2016-01-20 16:17:51+00:00,2015-08-11 05:40:29+00:00,2015-08-11 05:40:29+00:00,False
273db68971215ed764f24e23f49469c54e9bcd4b,42086194,120,closed,"I was using hyphenated names for path variables and they had been working well before the commit 8965bfef36e398a40fa4afbe4e22eea61cb8db86.
But after the commit was pushed, hyphenated variables names cause a regexp syntax error and it is causing a problem to me.

I believe that mux should keep the support of such variable names, hence I made some changes to achieve it.
I'd appreciate it if my changes could be accepted.

If the naming convention was intentionally revised, my changes can be ignored but it is really helpful to document the naming convention somewhere in README.md instead.
",Reduce variable name restriction,2015-08-11 02:08:56+00:00,2016-01-20 16:17:51+00:00,2015-08-11 05:40:29+00:00,2015-08-11 05:40:29+00:00,False
577b9e4a658e25897ddd3320255d96a9285a26c0,42086194,120,closed,"I was using hyphenated names for path variables and they had been working well before the commit 8965bfef36e398a40fa4afbe4e22eea61cb8db86.
But after the commit was pushed, hyphenated variables names cause a regexp syntax error and it is causing a problem to me.

I believe that mux should keep the support of such variable names, hence I made some changes to achieve it.
I'd appreciate it if my changes could be accepted.

If the naming convention was intentionally revised, my changes can be ignored but it is really helpful to document the naming convention somewhere in README.md instead.
",Reduce variable name restriction,2015-08-11 02:08:56+00:00,2016-01-20 16:17:51+00:00,2015-08-11 05:40:29+00:00,2015-08-11 05:40:29+00:00,False
ca524fd37fc91e043c82ba10aed96f77d523c514,41948583,118,closed,"Added a (small) complete example to the README that includes how to pass a router to `http.ListenAndServe` for newbie Gophers.

Addresses https://github.com/gorilla/mux/issues/32
",Updated README w/ runnable example. Addresses #32.,2015-08-08 04:43:32+00:00,2015-08-08 06:16:13+00:00,2015-08-08 06:16:13+00:00,2015-08-08 06:16:13+00:00,False
e73f183699f8ab7d54609771e1fa0ab7ffddc21b,41856943,117,closed,"The router now associates a regexp named group with each mux variable.
It only fills variables when capturing group name match instead of
relying on indices, which doesn't work if a variable regexp has interior
capturing groups.

Fixes #62
",fix use of capturing subexpressions in pattern matches.,2015-08-07 03:33:30+00:00,2018-03-09 23:40:19+00:00,2015-08-07 20:34:17+00:00,2015-08-07 20:34:17+00:00,False
13c8226081008f7ade9c619da744ed14e78eb8de,41650784,116,closed,"For a middleware I'm working on I wanted to use `CurrentRoute` and was surprised it always returned `nil`. Then I realised it is only set just before the handler will be called and will be cleared directly after (on purpose) here: https://github.com/gorilla/mux/blob/master/mux.go#L98

I think it would be a good idea to add a small note, to take the expectation away that `CurrentRoute` can be used outside the handler.
",Add note about the availability of CurrentRoute.,2015-08-05 07:35:22+00:00,2015-08-05 16:48:15+00:00,2015-08-05 16:48:15+00:00,2015-08-05 16:48:15+00:00,False
39cff3481ca9e2726231c3067f58fcf3a8c9e333,41650784,116,closed,"For a middleware I'm working on I wanted to use `CurrentRoute` and was surprised it always returned `nil`. Then I realised it is only set just before the handler will be called and will be cleared directly after (on purpose) here: https://github.com/gorilla/mux/blob/master/mux.go#L98

I think it would be a good idea to add a small note, to take the expectation away that `CurrentRoute` can be used outside the handler.
",Add note about the availability of CurrentRoute.,2015-08-05 07:35:22+00:00,2015-08-05 16:48:15+00:00,2015-08-05 16:48:15+00:00,2015-08-05 16:48:15+00:00,False
98fb535d771e43021d337c156c78ab13d1a7f506,39201212,100,closed,"Address #16  and added the support for regular expressions.
",Issue #16: Added regex support for matching headers,2015-07-04 02:04:42+00:00,2015-07-28 00:59:08+00:00,2015-07-27 16:40:50+00:00,2015-07-27 16:40:50+00:00,False
3339267a853e3a855d6e415b96d6f3447b60a824,40208607,111,closed,"Fix for https://github.com/gorilla/mux/issues/109.

Unfortunately we broke the query matcher when the query's `defaultPattern` was changed in https://github.com/gorilla/mux/pull/108.

In this PR the `getUrlQuery` method loops over query parameters and only returns a string to match if the the parameter exists in the request (which is how it should have been in the first place).
",Issue #109,2015-07-17 08:07:39+00:00,2015-07-17 22:25:12+00:00,2015-07-17 15:02:10+00:00,2015-07-17 15:02:10+00:00,False
fe40f0d05612a52a42bbbcd9d28cb81ebe4e6d36,40208607,111,closed,"Fix for https://github.com/gorilla/mux/issues/109.

Unfortunately we broke the query matcher when the query's `defaultPattern` was changed in https://github.com/gorilla/mux/pull/108.

In this PR the `getUrlQuery` method loops over query parameters and only returns a string to match if the the parameter exists in the request (which is how it should have been in the first place).
",Issue #109,2015-07-17 08:07:39+00:00,2015-07-17 22:25:12+00:00,2015-07-17 15:02:10+00:00,2015-07-17 15:02:10+00:00,False
19f0a91c4e299b8253f142001ad546110f3c1e84,40112662,108,closed,"This PR is a solution to the issue raised by @epelc in https://github.com/gorilla/mux/commit/0c9d5c08c1d6103f2ced11750a195fc94902d3fc#commitcomment-12196652

Not sure if it's the right approach but at least something for discussion. There should be a more idiomatic/explicit way to test if the `defaultPattern` should be added to the `pattern` but this was an easy way to do it.
",fix for empty query,2015-07-16 09:58:35+00:00,2015-07-16 16:34:42+00:00,2015-07-16 14:26:10+00:00,2015-07-16 14:26:10+00:00,False
2b32409792406cc61512ca3aa35706bb9ce8c7dd,40112662,108,closed,"This PR is a solution to the issue raised by @epelc in https://github.com/gorilla/mux/commit/0c9d5c08c1d6103f2ced11750a195fc94902d3fc#commitcomment-12196652

Not sure if it's the right approach but at least something for discussion. There should be a more idiomatic/explicit way to test if the `defaultPattern` should be added to the `pattern` but this was an easy way to do it.
",fix for empty query,2015-07-16 09:58:35+00:00,2015-07-16 16:34:42+00:00,2015-07-16 14:26:10+00:00,2015-07-16 14:26:10+00:00,False
92ae1d67265b4cf52d659a340435398e8da2ad05,39615354,106,closed,"…to walk matchers so it walks the full list of routers and child routers

This is just an update of the work done in https://github.com/gorilla/mux/pull/83 to properly account for subrouters
",Update the walk method  …,2015-07-09 18:48:44+00:00,2015-07-16 17:39:48+00:00,2015-07-16 17:39:48+00:00,2015-07-16 17:39:48+00:00,False
8eb02a9f12e527fe2ce9ab3b640579a6104f2d44,39498612,104,closed,"to make it easier to generate a API page that lists all routes by template

This works well with https://github.com/gorilla/mux/pull/83 so you can do something like

`````` go
func Index(router *mux.Router) *index {
    return &index{router}
}

type index struct {
    router *mux.Router
}

func (h *index) ServeHTTP(rw http.ResponseWriter, req *http.Request) {
    h.router.Walk(func(route *mux.Route, router *mux.Router, ancestors []*mux.Route) error {
        path, _ := route.URLPathTemplate()
        fmt.Fprintf(rw, ""%s\n"", path)
        return nil
    })
}```
``````
",Add URLPathTemplate to Route …,2015-07-08 16:50:50+00:00,2016-03-05 22:20:54+00:00,2016-03-05 13:56:38+00:00,2016-03-05 13:56:38+00:00,False
0c9d5c08c1d6103f2ced11750a195fc94902d3fc,39219985,101,closed,"PR adds support for regexp quantifiers for query strings, so that `Queries(""foo"", ""{v1:[a-z]{3}}"")` will match for `&foo=bar` but not for `&foo=bars`.

The query matcher currently looks for `foo=[a-z]{3}` in the entire URL query string (`baz=ding&foo=bars`) and returns a match. PR looks for `^foo=[a-z]{3}$` in only `foo=bars` and therefore will not match.
",Fixing query regexp patterns with quantifiers ,2015-07-05 12:15:42+00:00,2015-07-05 23:02:19+00:00,2015-07-05 23:02:19+00:00,2015-07-05 23:02:19+00:00,False
a710a8bfa96010c24d50767a4207e34a0b9f1b90,39219985,101,closed,"PR adds support for regexp quantifiers for query strings, so that `Queries(""foo"", ""{v1:[a-z]{3}}"")` will match for `&foo=bar` but not for `&foo=bars`.

The query matcher currently looks for `foo=[a-z]{3}` in the entire URL query string (`baz=ding&foo=bars`) and returns a match. PR looks for `^foo=[a-z]{3}$` in only `foo=bars` and therefore will not match.
",Fixing query regexp patterns with quantifiers ,2015-07-05 12:15:42+00:00,2015-07-05 23:02:19+00:00,2015-07-05 23:02:19+00:00,2015-07-05 23:02:19+00:00,False
306509329bce2152a92040e805ef24fd8e3f877d,39201212,100,closed,"Address #16  and added the support for regular expressions.
",Issue #16: Added regex support for matching headers,2015-07-04 02:04:42+00:00,2015-07-28 00:59:08+00:00,2015-07-27 16:40:50+00:00,2015-07-27 16:40:50+00:00,False
c21431a6cd004f2e4ac692b2ec8c56f3a4ebd036,39201212,100,closed,"Address #16  and added the support for regular expressions.
",Issue #16: Added regex support for matching headers,2015-07-04 02:04:42+00:00,2015-07-28 00:59:08+00:00,2015-07-27 16:40:50+00:00,2015-07-27 16:40:50+00:00,False
c0a5cbce5acc7d44030541b8b383b1ebcdfcc96f,39201212,100,closed,"Address #16  and added the support for regular expressions.
",Issue #16: Added regex support for matching headers,2015-07-04 02:04:42+00:00,2015-07-28 00:59:08+00:00,2015-07-27 16:40:50+00:00,2015-07-27 16:40:50+00:00,False
a063f14812c8ea1ae2a62a8d9b2307afe23348a7,39201212,100,closed,"Address #16  and added the support for regular expressions.
",Issue #16: Added regex support for matching headers,2015-07-04 02:04:42+00:00,2015-07-28 00:59:08+00:00,2015-07-27 16:40:50+00:00,2015-07-27 16:40:50+00:00,False
77f424d3ae04bf4130e489900890fa84992d9b40,36545873,98,closed,,Fix typo,2015-05-29 21:17:03+00:00,2015-05-30 19:53:59+00:00,2015-05-30 19:53:56+00:00,2015-05-30 19:53:56+00:00,False
9641367e95358701e3b0b36e09090c8c10131e0c,33892382,93,closed,"This fixes issue where if user has tab width other than 4, some lines will become misaligned. For example, see the package description at https://godoc.org/github.com/gorilla/mux.

![image](https://cloud.githubusercontent.com/assets/1924134/7283436/67547294-e8eb-11e4-994e-02dfae4c00c7.png)
","Fix up doc formatting, use spaces for alignment (tabs are for indentation only).",2015-04-22 19:28:45+00:00,2015-04-22 20:51:21+00:00,2015-04-22 20:14:49+00:00,2015-04-22 20:14:49+00:00,False
e98fd88cbd7216fd46d0b480a047d34748d603d5,30936846,89,closed,"Sorry, I realized the previous test doesn't make sense if we don't test the other pipe possibility...

refs #62 
",Add complementary test for patterns with pipe,2015-03-11 12:04:32+00:00,2015-05-05 17:01:46+00:00,2015-05-05 17:01:36+00:00,2015-05-05 17:01:36+00:00,False
00bf0e01a12e9ce13adef15e5ddb53700d90bd81,30909185,88,closed,"closes #62
",Add tests for patterns with pipe,2015-03-11 01:38:52+00:00,2015-03-11 03:17:37+00:00,2015-03-11 03:17:36+00:00,2015-03-11 03:17:36+00:00,False
d7e46398189abd89d18d874e3c53b42d492002b8,21829367,71,closed,"Return early on getHost function to avoid having all the logic inside an if block, and put more clearly when is strict slash going to be matched
",Rearrange code,2014-09-26 05:33:08+00:00,2014-09-26 15:38:14+00:00,2014-09-26 15:38:14+00:00,2014-09-26 15:38:14+00:00,False
8df3a80fb8cd2b280d3b0b7d809ad80c1d0be236,21829367,71,closed,"Return early on getHost function to avoid having all the logic inside an if block, and put more clearly when is strict slash going to be matched
",Rearrange code,2014-09-26 05:33:08+00:00,2014-09-26 15:38:14+00:00,2014-09-26 15:38:14+00:00,2014-09-26 15:38:14+00:00,False
8f1a419c38688087a65a29395ac483f7b113c745,19605079,67,closed,"The presence of a blank line was preventing the documentation from appearing in godoc.
",Remove blank line to fix docs for  Route.Queries,2014-08-11 14:45:41+00:00,2014-08-11 16:32:41+00:00,2014-08-11 14:46:53+00:00,2014-08-11 14:46:53+00:00,False
3351f602a5ba82692d059fad533e58702e0cb5ce,17549701,60,closed,"make the gofmt happy
",gofmt,2014-06-24 18:44:24+00:00,2014-06-24 18:46:30+00:00,2014-06-24 18:46:26+00:00,2014-06-24 18:46:26+00:00,False
451fd8b7796015afbe01cfe9168e4c51e8b40013,16382009,56,closed,,"Fix ""Queries"" matcher to support out-of-order query string parameters",2014-05-27 16:35:23+00:00,2014-06-12 19:42:45+00:00,2014-05-27 23:41:47+00:00,2014-05-27 23:41:47+00:00,False
3505396fb555c93ffac5e511eb8addb3bc4a9397,16382009,56,closed,,"Fix ""Queries"" matcher to support out-of-order query string parameters",2014-05-27 16:35:23+00:00,2014-06-12 19:42:45+00:00,2014-05-27 23:41:47+00:00,2014-05-27 23:41:47+00:00,False
69237eaae593124b64a499c92be50a5ce17db2e6,16382009,56,closed,,"Fix ""Queries"" matcher to support out-of-order query string parameters",2014-05-27 16:35:23+00:00,2014-06-12 19:42:45+00:00,2014-05-27 23:41:47+00:00,2014-05-27 23:41:47+00:00,False
0a0d6a1b2a0c75b931495697ce6a2182f810ffb3,16348919,55,closed,"This PR adds the ability to define variables in query string values for example:

``` go
r := mux.NewRouter()
r.Queries(""id"", ""{id:[0-9]+}"")
```
",Add ability to capture variables in query strings,2014-05-26 22:05:36+00:00,2014-06-21 13:11:36+00:00,2014-05-27 04:48:09+00:00,2014-05-27 04:48:09+00:00,False
c9469524da00abe15b8d00bb1ee9621d85ebdfbc,16348919,55,closed,"This PR adds the ability to define variables in query string values for example:

``` go
r := mux.NewRouter()
r.Queries(""id"", ""{id:[0-9]+}"")
```
",Add ability to capture variables in query strings,2014-05-26 22:05:36+00:00,2014-06-21 13:11:36+00:00,2014-05-27 04:48:09+00:00,2014-05-27 04:48:09+00:00,False
65cc9b5df83a841607cf9f88c58cb6cdd8ab0421,16348919,55,closed,"This PR adds the ability to define variables in query string values for example:

``` go
r := mux.NewRouter()
r.Queries(""id"", ""{id:[0-9]+}"")
```
",Add ability to capture variables in query strings,2014-05-26 22:05:36+00:00,2014-06-21 13:11:36+00:00,2014-05-27 04:48:09+00:00,2014-05-27 04:48:09+00:00,False
a883d5a9b9d5fb9f3c084dd9858ee6fa11d9c622,15082718,52,closed,"This PR introduces a new BuildVarsFunc that can be attached to a route. A BuildVarsFunc allows you to intercept and modify the route variable map passed to `.URL` or `.URLPath` or `.URLHost` before generating the URL.

It is useful when you want to be liberal in matching routes but conservative in constructing them. For example, you might want to normalize all blog post URL slugs to be lowercase, but still match uppercase slugs. Without BuildVarsFunc, you would have to ensure that all callers of `.URL{,Path,Host}` lowercased the slug beforehand. With BuildVarsFunc, you can just call `.URL{,Path,Host}` directly without any additional wrapper functions.

BuildVarsFunc is useful in conjunction with PostMatchFunc at https://github.com/gorilla/mux/pull/53.
",BuildVarsFunc: modify route variables before building the URL from a route,2014-04-23 18:50:40+00:00,2015-02-13 19:39:07+00:00,2015-02-13 19:22:55+00:00,2015-02-13 19:22:55+00:00,False
cef3b0cd6d468434914c21146d6e400436f2d0e3,15082718,52,closed,"This PR introduces a new BuildVarsFunc that can be attached to a route. A BuildVarsFunc allows you to intercept and modify the route variable map passed to `.URL` or `.URLPath` or `.URLHost` before generating the URL.

It is useful when you want to be liberal in matching routes but conservative in constructing them. For example, you might want to normalize all blog post URL slugs to be lowercase, but still match uppercase slugs. Without BuildVarsFunc, you would have to ensure that all callers of `.URL{,Path,Host}` lowercased the slug beforehand. With BuildVarsFunc, you can just call `.URL{,Path,Host}` directly without any additional wrapper functions.

BuildVarsFunc is useful in conjunction with PostMatchFunc at https://github.com/gorilla/mux/pull/53.
",BuildVarsFunc: modify route variables before building the URL from a route,2014-04-23 18:50:40+00:00,2015-02-13 19:39:07+00:00,2015-02-13 19:22:55+00:00,2015-02-13 19:22:55+00:00,False
b864f07c539c7abc16652d65350d070d8e2810de,15080058,51,closed,"This is a partial fix for the problems mentioned in https://github.com/gorilla/mux/issues/31. It also documents the behaviour around slashes more thoroughly.
","Make PathPrefix more polite towards StrictSlash setting, and add better tests for the latter",2014-04-23 17:58:33+00:00,2014-06-18 10:39:06+00:00,2014-05-05 13:44:26+00:00,2014-05-05 13:44:26+00:00,False
3509745ae8a2db852c51794a6f6e9f1e533e1632,15080058,51,closed,"This is a partial fix for the problems mentioned in https://github.com/gorilla/mux/issues/31. It also documents the behaviour around slashes more thoroughly.
","Make PathPrefix more polite towards StrictSlash setting, and add better tests for the latter",2014-04-23 17:58:33+00:00,2014-06-18 10:39:06+00:00,2014-05-05 13:44:26+00:00,2014-05-05 13:44:26+00:00,False
bac13721298f7a2dbf554446a58826c2035e70e8,15080058,51,closed,"This is a partial fix for the problems mentioned in https://github.com/gorilla/mux/issues/31. It also documents the behaviour around slashes more thoroughly.
","Make PathPrefix more polite towards StrictSlash setting, and add better tests for the latter",2014-04-23 17:58:33+00:00,2014-06-18 10:39:06+00:00,2014-05-05 13:44:26+00:00,2014-05-05 13:44:26+00:00,False
033224c12ed48938d1815f4851103f86abcf6201,15080058,51,closed,"This is a partial fix for the problems mentioned in https://github.com/gorilla/mux/issues/31. It also documents the behaviour around slashes more thoroughly.
","Make PathPrefix more polite towards StrictSlash setting, and add better tests for the latter",2014-04-23 17:58:33+00:00,2014-06-18 10:39:06+00:00,2014-05-05 13:44:26+00:00,2014-05-05 13:44:26+00:00,False
525eff436e45137f9c4ffa422f18bab457a96500,15080058,51,closed,"This is a partial fix for the problems mentioned in https://github.com/gorilla/mux/issues/31. It also documents the behaviour around slashes more thoroughly.
","Make PathPrefix more polite towards StrictSlash setting, and add better tests for the latter",2014-04-23 17:58:33+00:00,2014-06-18 10:39:06+00:00,2014-05-05 13:44:26+00:00,2014-05-05 13:44:26+00:00,False
9ee70e572c1827c6524470f8fd12839bf7b98a39,14863142,49,closed,"The files mux.go and mux_test.go on master were not gofmt'd. It would make it a bit easier to submit PRs if everything was gofmt'd (otherwise, people have to undo the gofmt that their editor applies to lines that are not relevant to their PR).
",Apply gofmt,2014-04-17 07:46:25+00:00,2014-07-02 07:34:24+00:00,2014-04-19 08:20:04+00:00,2014-04-19 08:20:04+00:00,False
cebebed6c46dc99617b23015fa96ef1f78d93ee4,10406199,43,closed,"result of `gofmt -s -w .`.
",go fmt.,2013-11-30 00:24:25+00:00,2014-07-12 15:04:53+00:00,2013-11-30 00:28:40+00:00,2013-11-30 00:28:40+00:00,False
ab8ae247f17a9f1bbe9bda321aa6719600eb4775,10058599,41,closed,,Fix to keep query string intact when 301 redirect occurs.,2013-11-18 17:55:58+00:00,2014-07-21 20:27:46+00:00,2013-11-30 22:10:54+00:00,2013-11-30 22:10:54+00:00,False
6689ee8243e28381f38fff95d65c84a575fa86f8,10058599,41,closed,,Fix to keep query string intact when 301 redirect occurs.,2013-11-18 17:55:58+00:00,2014-07-21 20:27:46+00:00,2013-11-30 22:10:54+00:00,2013-11-30 22:10:54+00:00,False
1a2411f44a858576b750ffb9d5c0975570ef1f2d,10058599,41,closed,,Fix to keep query string intact when 301 redirect occurs.,2013-11-18 17:55:58+00:00,2014-07-21 20:27:46+00:00,2013-11-30 22:10:54+00:00,2013-11-30 22:10:54+00:00,False
d10d5466f2db2758bb616f627775692d2f69fe8a,10058599,41,closed,,Fix to keep query string intact when 301 redirect occurs.,2013-11-18 17:55:58+00:00,2014-07-21 20:27:46+00:00,2013-11-30 22:10:54+00:00,2013-11-30 22:10:54+00:00,False
9d99a927754de25f584c08c423866c12207ce9e3,9825857,38,closed,,Fix typo in documentation,2013-11-10 04:22:05+00:00,2014-07-11 07:31:09+00:00,2013-11-10 06:54:15+00:00,2013-11-10 06:54:15+00:00,False
0ae6d35b080d1dcbc5744904e4aec8504283115d,8253873,35,closed,"remove doubly present ""the""
",Fix typo,2013-09-11 18:34:00+00:00,2014-06-18 07:48:18+00:00,2013-09-11 20:10:56+00:00,2013-09-11 20:10:56+00:00,False
04a79835ae36db13cbcc39e8420082a48549a42a,7958753,33,closed,"Fixed a typo for you
","Add ""of"" like the rest of the function docstrings",2013-08-29 16:26:33+00:00,2014-07-05 07:38:40+00:00,2013-08-29 16:41:54+00:00,2013-08-29 16:41:54+00:00,False
bb851ab75f24e4a2ad8593bda4ce72a76164ec26,4804764,15,closed,,Add example of a Matcher Func in documentation,2013-03-25 21:53:11+00:00,2014-07-05 05:56:53+00:00,2013-03-25 22:01:14+00:00,2013-03-25 22:01:14+00:00,False
38545dbae82fbb96b45986dcda1fcb87114904e2,3962982,12,closed,,Removed excess bool variable assignment in `if`s,2013-02-03 02:48:27+00:00,2014-06-18 21:16:00+00:00,2013-02-03 09:13:26+00:00,2013-02-03 09:13:26+00:00,False
78f60492585e9f21942b155e870e019a401937ef,3716104,9,closed,"Remove unnecessary comma
",Remove unnecessary comma,2013-01-17 08:54:43+00:00,2014-07-10 03:06:07+00:00,2013-01-17 09:15:30+00:00,2013-01-17 09:15:30+00:00,False
f89494aed121356fbc0ab4c1143cfdf7256477ae,2643224,3,closed,"Separated the tests in to test functions depending on what they are
testing.

Moved some test-specific functiosn in to closures within the test
functions themselves.
",Finished converting rest of mux tests to table tests,2012-10-14 21:39:11+00:00,2014-06-14 08:07:16+00:00,2012-10-16 18:26:53+00:00,2012-10-16 18:26:53+00:00,False
bcb4f4bcdcd397e47609704f9b88c327db9eaa90,2552727,1,closed,"I think it's easier to reason about the tests if they're in a table like this as opposed to setting and resetting variables. It also makes it easier to add new test cases. Some ideas such as the title field I got thanks to @davecheney.

I will convert the rest of the test file to a similar style if this is acceptable.
",Converted TestRoute to a table-driven test,2012-10-05 06:12:58+00:00,2014-07-10 10:31:39+00:00,2012-10-05 09:28:35+00:00,2012-10-05 09:28:35+00:00,False
b4617d0b9670ad14039b2739167fd35a60f557c5,1561619493,734,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [x] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [ ] Documentation Update
- [ ] Go Version Update
- [ ] Dependency Update

## Description

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [x] `make verify` is passing
- [x] `make test` is passing
",update GitHub workflows,2023-10-18 01:33:54+00:00,2023-10-18 11:23:01+00:00,2023-10-18 11:23:00+00:00,2023-10-18 11:23:00+00:00,False
3401478badc7aa55470bc806ee8cd185a16f9298,1499789522,733,closed,"<!--
     For Work In Progress Pull Requests, please use the Draft PR feature,
     see https://github.blog/2019-02-14-introducing-draft-pull-requests/ for further details.

     For a timely review/response, please avoid force-pushing additional
     commits if your PR already received reviews or comments.

     Before submitting a Pull Request, please ensure that you have:
     - 📖 Read the Contributing guide: https://github.com/gorilla/.github/blob/main/CONTRIBUTING.md
     - 📖 Read the Code of Conduct: https://github.com/gorilla/.github/blob/main/CODE_OF_CONDUCT.md

     - Provide tests for your changes.
     - Use descriptive commit messages.
	 - Comment your code where appropriate.
	 - Squash your commits
     - Update any related documentation.

     - Add gorilla/pull-request-reviewers as a Reviewer
-->

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [X] Documentation Update
- [ ] Go Version Update
- [ ] Dependency Update

## Description

Changed the SPA handler example in README.md in two areas. First, made sure to actually include the requested path in the call to `filepath.Join`. Secondly, if the requested path hits a directory, I think it would be beneficial to also serve the `indexPath` file, and not list the directory contents. I also edited the comments in the `README.md` file accordingly.

## Related Tickets & Documents

<!--
For pull requests that relate or close an issue, please include them
below.  We like to follow [Github's guidance on linking issues to pull requests](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).

For example having the text: ""closes #1234"" would connect the current pull
request to issue 1234.  And when we merge the pull request, Github will
automatically close the issue.
-->

- Related Issue #
- Closes #

## Added/updated tests?

- [ ] Yes
- [X] No, and this is why: I only changed the `README.md`, if any tests are necessary please let me know
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [ ] `make test` is passing
",fix SPA handler in README.md,2023-09-02 07:31:51+00:00,2023-09-21 03:06:09+00:00,2023-09-21 03:06:09+00:00,2023-09-21 03:06:09+00:00,False
4a671cbc5162efa2ecb1b353e6a704a62737d66c,940172942,676,closed,"**Summary of Changes**

1. Added `r.GetVarNames()` function to list all vars a route might need in order to call `r.URL()`",Add GetVarNames(),2022-05-18 16:15:43+00:00,2023-08-24 19:57:52+00:00,2023-08-24 19:57:52+00:00,2023-08-24 19:57:52+00:00,False
976b536446a77de8de2d5559c78f612970fb5e37,1653778060,748,closed,"## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [x] Bug Fix
- [ ] Optimization
- [ ] Documentation Update
- [ ] Go Version Update
- [ ] Dependency Update

## Description
Fix made in #712 is not an optimal solution to the problem #704, since it completely prevents the possibility of getting error `ErrMethodMismatch` for subrouters.

The proposed solution corrects this situation and allows correct error handling of invalid query paramaters and preserves the possibility of getting `ErrMethodMismatch` in subrouters.

## Related Tickets & Documents

- Related Issue #739
- Closes #739

## Added/updated tests?

- [x] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [x] `make verify` is passing
- [x] `make test` is passing",[BUG #739] Fixed handling of invalid query params,2023-12-21 13:41:04+00:00,2024-01-22 04:09:27+00:00,2024-01-22 04:09:27+00:00,2024-01-22 04:09:27+00:00,False
2b030fc311d07b8c5950807800b03b2d32a7142c,1653778060,748,closed,"## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [x] Bug Fix
- [ ] Optimization
- [ ] Documentation Update
- [ ] Go Version Update
- [ ] Dependency Update

## Description
Fix made in #712 is not an optimal solution to the problem #704, since it completely prevents the possibility of getting error `ErrMethodMismatch` for subrouters.

The proposed solution corrects this situation and allows correct error handling of invalid query paramaters and preserves the possibility of getting `ErrMethodMismatch` in subrouters.

## Related Tickets & Documents

- Related Issue #739
- Closes #739

## Added/updated tests?

- [x] Yes
- [ ] No, and this is why: _please replace this line with details on why tests
      have not been included_
- [ ] I need help with writing tests

## Run verifications and test

- [x] `make verify` is passing
- [x] `make test` is passing",[BUG #739] Fixed handling of invalid query params,2023-12-21 13:41:04+00:00,2024-01-22 04:09:27+00:00,2024-01-22 04:09:27+00:00,2024-01-22 04:09:27+00:00,False
e44017df2b8798f6bfff81fff1c0b319c1a54496,1019117412,691,closed,"**Summary of Changes**

Hello!

I found a few ""low hanging"" allocations that can be deferred until needed or
 even skipped entirely.

With all the optimizations combined, we can see the best improvement for
 simple, static routes (like a `/status` endpoint) that do not read the `Route`
 from the request context via `CurrentRoute` and do not populate any vars.
On these routes, we can process requests with a single allocation for the
 `RouteMatch` object. Previously there were 9 extra allocations.
For said routes the processing overhead (ns/op) in mux dropped by 75%, which is
 a speedup of 4x.

Other routes can expect to see a double-digit percentage reduction in both
 processing overhead (ns/op) and allocations as well.
These are driven by merging the context population into a single operation,
 eliminating two of ten allocations.

(Eliminating that last allocation for the `RouteMatch` in the best case
 requires significant refactoring to maintain full backwards compatibility.
 Something for another day.)

Each commit message contains benchmark results for showcasing particular
 (micro) optimizations in reduced allocations and in a few cases notable direct
 CPU time savings.

I also ran longer benchmarks with 100 repetitions in multiple settings on
 different generations of (server) CPUs.
First, there is the full set of benchmarks in this repository and second, the
 popular benchmarks https://github.com/julienschmidt/go-http-routing-benchmark.

All but the last change are entirely ""free"", as in they do not cut features for
 gains in performance. The last change for omitting the `Route` from the
context is behind an optional flag that users can opt in when they do not read
 the `Route` from the request context.
Said flag is stored local in a `Router`, so users can enable/disable the flag
 on Subrouters individually.

<details>
<summary> Benchmark results </summary>

I added all the new benchmarks onto a `baseline` branch for comparing the
 performance of the changes, tip is 0eba4f5731f329d9a95b67359e795344343a6119.

I'm running these tests on ""shared"" compute instances (and my Laptop), so
 expect some noise (and frequency scaling on the i7).

<details>
<summary> mux project benchmarks </summary>

You can reproduce these benchmarks using docker, pinned to CPU 1:

```bash
docker run --rm --pull always -v /logs:/logs --cpuset-cpus 1 -d golang:1.18 bash -exc 'git clone https://github.com/das7pad/mux.git && cd mux && for branch in baseline perf-cut-allocations; do git checkout ""$branch"" && go test -benchmem -bench . -count 100 -timeout 1h > ""/logs/$branch-all.txt""; done; go install golang.org/x/perf/cmd/benchstat@latest; benchstat /logs/baseline-all.txt /logs/perf-cut-allocations-all.txt > /logs/compare-all.txt'
```

<details>
<summary> Modern Xeon E, 3.4 GHz </summary>

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) E-2278G CPU @ 3.40GHz

name                                 old time/op    new time/op    delta
Mux                                    1.09µs ± 5%    0.96µs ± 6%  -12.33%  (p=0.000 n=90+90)
MuxSimple/default                       654ns ± 5%     333ns ± 4%  -49.06%  (p=0.000 n=90+94)
MuxSimple/omit_route_from_ctx           655ns ± 5%     146ns ± 3%  -77.78%  (p=0.000 n=93+95)
MuxAlternativeInRegexp                 1.58µs ± 5%    1.30µs ± 3%  -17.75%  (p=0.000 n=92+90)
ManyPathVariables                      1.82µs ± 6%    1.65µs ± 5%   -9.73%  (p=0.000 n=94+93)
PopulateContext/no_populated_vars       665ns ± 5%     339ns ± 5%  -48.97%  (p=0.000 n=95+96)
PopulateContext/empty_var               910ns ± 5%     763ns ± 6%  -16.16%  (p=0.000 n=84+87)
PopulateContext/populated_vars          974ns ±10%     807ns ± 7%  -17.13%  (p=0.000 n=96+89)
PopulateContext/omit_route_/static      664ns ± 5%     148ns ± 3%  -77.66%  (p=0.000 n=94+89)
PopulateContext/omit_route_/dynamic     915ns ± 6%     741ns ± 6%  -18.98%  (p=0.000 n=90+94)
_findQueryKey/0                         158ns ± 2%     146ns ± 2%   -7.07%  (p=0.000 n=91+88)
_findQueryKey/1                         198ns ± 4%     196ns ± 5%   -0.56%  (p=0.001 n=92+95)
_findQueryKey/2                         710ns ± 4%     705ns ± 4%   -0.80%  (p=0.000 n=94+94)
_findQueryKey/3                         804ns ± 4%     798ns ± 5%   -0.82%  (p=0.000 n=90+94)
_findQueryKey/4                        3.85ns ± 2%    3.85ns ± 3%     ~     (p=0.224 n=89+93)
_findQueryKeyGoLib/0                    664ns ± 4%     668ns ± 5%   +0.67%  (p=0.030 n=97+94)
_findQueryKeyGoLib/1                    359ns ± 6%     359ns ± 6%     ~     (p=0.830 n=94+93)
_findQueryKeyGoLib/2                   2.24µs ± 3%    2.23µs ± 4%   -0.37%  (p=0.041 n=95+93)
_findQueryKeyGoLib/3                   2.94µs ± 4%    2.92µs ± 3%   -0.68%  (p=0.001 n=90+94)
_findQueryKeyGoLib/4                   3.63ns ± 4%    3.62ns ± 3%   -0.38%  (p=0.014 n=91+88)

name                                 old alloc/op   new alloc/op   delta
Mux                                    1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
MuxSimple/default                      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx          1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                 2.62kB ± 0%    1.82kB ± 0%  -30.49%  (p=0.000 n=100+100)
ManyPathVariables                      1.53kB ± 1%    1.13kB ± 0%  -26.45%  (p=0.000 n=99+93)
PopulateContext/no_populated_vars      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
PopulateContext/empty_var              1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
PopulateContext/populated_vars         1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
_findQueryKey/0                         0.00B          0.00B          ~     (all equal)
_findQueryKey/1                         40.0B ± 0%     40.0B ± 0%     ~     (all equal)
_findQueryKey/2                          483B ± 0%      483B ± 0%     ~     (all equal)
_findQueryKey/3                          543B ± 0%      543B ± 0%     ~     (all equal)
_findQueryKey/4                         0.00B          0.00B          ~     (all equal)
_findQueryKeyGoLib/0                     864B ± 0%      864B ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     432B ± 0%      432B ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                   1.54kB ± 0%    1.54kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                   1.98kB ± 0%    1.98kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                    0.00B          0.00B          ~     (all equal)

name                                 old allocs/op  new allocs/op  delta
Mux                                      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
MuxSimple/default                        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx            9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                   20.0 ± 0%      16.0 ± 0%  -20.00%  (p=0.000 n=100+100)
ManyPathVariables                        14.0 ± 0%      12.0 ± 0%  -14.29%  (p=0.000 n=100+100)
PopulateContext/no_populated_vars        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
PopulateContext/empty_var                11.0 ± 0%       9.0 ± 0%  -18.18%  (p=0.000 n=100+100)
PopulateContext/populated_vars           10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic      11.0 ± 0%       8.0 ± 0%  -27.27%  (p=0.000 n=100+100)
_findQueryKey/0                          0.00           0.00          ~     (all equal)
_findQueryKey/1                          3.00 ± 0%      3.00 ± 0%     ~     (all equal)
_findQueryKey/2                          10.0 ± 0%      10.0 ± 0%     ~     (all equal)
_findQueryKey/3                          11.0 ± 0%      11.0 ± 0%     ~     (all equal)
_findQueryKey/4                          0.00           0.00          ~     (all equal)
_findQueryKeyGoLib/0                     8.00 ± 0%      8.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     4.00 ± 0%      4.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                     24.0 ± 0%      24.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                     28.0 ± 0%      28.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                     0.00           0.00          ~     (all equal)
```

---

</details>

<details>
<summary> Older Xeon Gold, 2.3 GHz </summary>

(Actual CPU identifier is rather `Intel(R) Xeon(R) Gold 5122 CPU @ 2.30GHz`)
```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel Xeon Processor (Skylake, IBRS) 

name                                 old time/op    new time/op    delta
Mux                                    1.61µs ± 6%    1.43µs ± 6%  -11.38%  (p=0.000 n=97+96)
MuxSimple/default                       979ns ± 8%     508ns ± 7%  -48.15%  (p=0.000 n=93+98)
MuxSimple/omit_route_from_ctx          1.00µs ±12%    0.22µs ± 4%  -77.76%  (p=0.000 n=99+96)
MuxAlternativeInRegexp                 2.40µs ± 9%    2.03µs ±12%  -15.15%  (p=0.000 n=94+98)
ManyPathVariables                      2.77µs ± 8%    2.60µs ±12%   -6.17%  (p=0.000 n=94+99)
PopulateContext/no_populated_vars      1.03µs ±11%    0.54µs ±13%  -47.57%  (p=0.000 n=94+98)
PopulateContext/empty_var              1.35µs ± 6%    1.23µs ±11%   -9.01%  (p=0.000 n=95+96)
PopulateContext/populated_vars         1.40µs ± 8%    1.30µs ±14%   -6.98%  (p=0.000 n=97+99)
PopulateContext/omit_route_/static      989ns ± 7%     239ns ±10%  -75.78%  (p=0.000 n=99+99)
PopulateContext/omit_route_/dynamic    1.34µs ± 7%    1.21µs ±15%  -10.04%  (p=0.000 n=95+99)
_findQueryKey/0                         242ns ± 8%     228ns ± 8%   -6.00%  (p=0.000 n=97+95)
_findQueryKey/1                         304ns ± 7%     309ns ± 9%   +1.60%  (p=0.002 n=97+97)
_findQueryKey/2                        1.08µs ± 8%    1.14µs ±10%   +5.28%  (p=0.000 n=99+97)
_findQueryKey/3                        1.20µs ± 6%    1.23µs ± 9%   +2.03%  (p=0.000 n=92+99)
_findQueryKey/4                        5.86ns ± 4%    5.89ns ± 5%   +0.56%  (p=0.041 n=93+96)
_findQueryKeyGoLib/0                    992ns ± 7%    1067ns ±11%   +7.59%  (p=0.000 n=94+98)
_findQueryKeyGoLib/1                    528ns ± 6%     571ns ±11%   +8.04%  (p=0.000 n=97+100)
_findQueryKeyGoLib/2                   3.46µs ± 6%    3.60µs ±10%   +4.18%  (p=0.000 n=96+95)
_findQueryKeyGoLib/3                   4.54µs ± 6%    4.75µs ±11%   +4.62%  (p=0.000 n=92+98)
_findQueryKeyGoLib/4                   5.50ns ± 4%    5.62ns ± 7%   +2.14%  (p=0.000 n=91+96)

name                                 old alloc/op   new alloc/op   delta
Mux                                    1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
MuxSimple/default                      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx          1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                 2.62kB ± 0%    1.82kB ± 0%  -30.49%  (p=0.000 n=100+100)
ManyPathVariables                      1.52kB ± 0%    1.12kB ± 0%  -26.50%  (p=0.000 n=92+97)
PopulateContext/no_populated_vars      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
PopulateContext/empty_var              1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
PopulateContext/populated_vars         1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
_findQueryKey/0                         0.00B          0.00B          ~     (all equal)
_findQueryKey/1                         40.0B ± 0%     40.0B ± 0%     ~     (all equal)
_findQueryKey/2                          483B ± 0%      483B ± 0%     ~     (all equal)
_findQueryKey/3                          543B ± 0%      543B ± 0%     ~     (all equal)
_findQueryKey/4                         0.00B          0.00B          ~     (all equal)
_findQueryKeyGoLib/0                     864B ± 0%      864B ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     432B ± 0%      432B ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                   1.54kB ± 0%    1.54kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                   1.98kB ± 0%    1.98kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                    0.00B          0.00B          ~     (all equal)

name                                 old allocs/op  new allocs/op  delta
Mux                                      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
MuxSimple/default                        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx            9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                   20.0 ± 0%      16.0 ± 0%  -20.00%  (p=0.000 n=100+100)
ManyPathVariables                        14.0 ± 0%      12.0 ± 0%  -14.29%  (p=0.000 n=100+100)
PopulateContext/no_populated_vars        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
PopulateContext/empty_var                11.0 ± 0%       9.0 ± 0%  -18.18%  (p=0.000 n=100+100)
PopulateContext/populated_vars           10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic      11.0 ± 0%       8.0 ± 0%  -27.27%  (p=0.000 n=100+100)
_findQueryKey/0                          0.00           0.00          ~     (all equal)
_findQueryKey/1                          3.00 ± 0%      3.00 ± 0%     ~     (all equal)
_findQueryKey/2                          10.0 ± 0%      10.0 ± 0%     ~     (all equal)
_findQueryKey/3                          11.0 ± 0%      11.0 ± 0%     ~     (all equal)
_findQueryKey/4                          0.00           0.00          ~     (all equal)
_findQueryKeyGoLib/0                     8.00 ± 0%      8.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     4.00 ± 0%      4.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                     24.0 ± 0%      24.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                     28.0 ± 0%      28.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                     0.00           0.00          ~     (all equal)
```

---

</details>

<details>
<summary> Older Xeon E, 2.4 GHz </summary>

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz

name                                 old time/op    new time/op    delta
Mux                                    1.81µs ±13%    1.57µs ±10%  -13.50%  (p=0.000 n=99+97)
MuxSimple/default                      1.09µs ± 8%    0.55µs ±10%  -49.51%  (p=0.000 n=96+95)
MuxSimple/omit_route_from_ctx          1.08µs ±10%    0.25µs ± 8%  -76.66%  (p=0.000 n=95+94)
MuxAlternativeInRegexp                 2.59µs ±12%    2.14µs ±13%  -17.06%  (p=0.000 n=95+92)
ManyPathVariables                      3.11µs ± 9%    2.78µs ±10%  -10.62%  (p=0.000 n=96+99)
PopulateContext/no_populated_vars      1.09µs ± 9%    0.56µs ± 7%  -48.63%  (p=0.000 n=94+93)
PopulateContext/empty_var              1.48µs ± 9%    1.28µs ±12%  -13.52%  (p=0.000 n=97+96)
PopulateContext/populated_vars         1.56µs ±11%    1.34µs ±10%  -13.84%  (p=0.000 n=96+97)
PopulateContext/omit_route_/static     1.08µs ± 9%    0.26µs ± 9%  -75.89%  (p=0.000 n=98+97)
PopulateContext/omit_route_/dynamic    1.50µs ±11%    1.20µs ± 9%  -19.96%  (p=0.000 n=94+93)
_findQueryKey/0                         254ns ± 8%     243ns ± 8%   -4.44%  (p=0.000 n=96+91)
_findQueryKey/1                         336ns ± 7%     336ns ± 8%     ~     (p=0.920 n=96+95)
_findQueryKey/2                        1.25µs ±12%    1.27µs ±14%   +1.55%  (p=0.043 n=97+98)
_findQueryKey/3                        1.37µs ± 8%    1.38µs ± 9%   +0.97%  (p=0.030 n=97+95)
_findQueryKey/4                        5.93ns ± 6%    5.97ns ± 7%     ~     (p=0.074 n=97+97)
_findQueryKeyGoLib/0                   1.07µs ± 9%    1.13µs ±10%   +4.99%  (p=0.000 n=96+95)
_findQueryKeyGoLib/1                    581ns ± 8%     586ns ± 9%     ~     (p=0.089 n=96+99)
_findQueryKeyGoLib/2                   3.93µs ±12%    3.80µs ±10%   -3.31%  (p=0.000 n=96+91)
_findQueryKeyGoLib/3                   5.18µs ±10%    5.06µs ± 8%   -2.27%  (p=0.000 n=98+99)
_findQueryKeyGoLib/4                   6.52ns ± 6%    6.49ns ± 4%     ~     (p=0.232 n=96+94)

name                                 old alloc/op   new alloc/op   delta
Mux                                    1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
MuxSimple/default                      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx          1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                 2.62kB ± 0%    1.82kB ± 0%  -30.49%  (p=0.000 n=100+100)
ManyPathVariables                      1.52kB ± 0%    1.12kB ± 1%  -26.58%  (p=0.000 n=92+96)
PopulateContext/no_populated_vars      1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
PopulateContext/empty_var              1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
PopulateContext/populated_vars         1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
_findQueryKey/0                         0.00B          0.00B          ~     (all equal)
_findQueryKey/1                         40.0B ± 0%     40.0B ± 0%     ~     (all equal)
_findQueryKey/2                          483B ± 0%      483B ± 0%     ~     (all equal)
_findQueryKey/3                          543B ± 0%      543B ± 0%     ~     (all equal)
_findQueryKey/4                         0.00B          0.00B          ~     (all equal)
_findQueryKeyGoLib/0                     864B ± 0%      864B ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     432B ± 0%      432B ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                   1.54kB ± 0%    1.54kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                   1.98kB ± 0%    1.98kB ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                    0.00B          0.00B          ~     (all equal)

name                                 old allocs/op  new allocs/op  delta
Mux                                      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
MuxSimple/default                        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
MuxSimple/omit_route_from_ctx            9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
MuxAlternativeInRegexp                   20.0 ± 0%      16.0 ± 0%  -20.00%  (p=0.000 n=100+100)
ManyPathVariables                        14.0 ± 0%      12.0 ± 0%  -14.29%  (p=0.000 n=100+100)
PopulateContext/no_populated_vars        9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
PopulateContext/empty_var                11.0 ± 0%       9.0 ± 0%  -18.18%  (p=0.000 n=100+100)
PopulateContext/populated_vars           10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
PopulateContext/omit_route_/static       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
PopulateContext/omit_route_/dynamic      11.0 ± 0%       8.0 ± 0%  -27.27%  (p=0.000 n=100+100)
_findQueryKey/0                          0.00           0.00          ~     (all equal)
_findQueryKey/1                          3.00 ± 0%      3.00 ± 0%     ~     (all equal)
_findQueryKey/2                          10.0 ± 0%      10.0 ± 0%     ~     (all equal)
_findQueryKey/3                          11.0 ± 0%      11.0 ± 0%     ~     (all equal)
_findQueryKey/4                          0.00           0.00          ~     (all equal)
_findQueryKeyGoLib/0                     8.00 ± 0%      8.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/1                     4.00 ± 0%      4.00 ± 0%     ~     (all equal)
_findQueryKeyGoLib/2                     24.0 ± 0%      24.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/3                     28.0 ± 0%      28.0 ± 0%     ~     (all equal)
_findQueryKeyGoLib/4                     0.00           0.00          ~     (all equal)
```

---

</details>

---

</details>


<details>
<summary> Popular go-http-routing-benchmark </summary>

I pushed three branches for comparison to my fork:
https://github.com/das7pad/go-http-routing-benchmark

- `before`, this is the baseline branch mentioned above
- `after`, this is the PR revision
- `after-omit-route`, like `after` with the `OmitRouteFromContext` flag enabled

You can reproduce these benchmarks using docker, pinned to CPU 1:

```bash
docker run --rm --pull always -v /logs:/logs --cpuset-cpus 1 -d golang:1.18 bash -exc 'git clone https://github.com/das7pad/go-http-routing-benchmark.git && cd go-http-routing-benchmark && for branch in before after after-omit-route; do git checkout ""$branch"" && go test -benchmem -bench Gorilla -count 100 -timeout 1h > ""/logs/$branch.txt""; done; go install golang.org/x/perf/cmd/benchstat@latest; benchstat /logs/before.txt /logs/after.txt > /logs/compare-before-vs-after.txt; benchstat /logs/before.txt /logs/after-omit-route.txt > /logs/compare-before-vs-after-omit-route.txt'
```

<details>
<summary> Modern Xeon E, 3.4 GHz </summary>

Before vs After with omit Route flag enabled

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) E-2278G CPU @ 3.40GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           1.86µs ±13%    1.37µs ± 6%  -26.08%  (p=0.000 n=94+96)
GorillaMux_Param5          2.61µs ± 4%    2.20µs ± 4%  -15.92%  (p=0.000 n=89+95)
GorillaMux_Param20         6.13µs ± 3%    3.98µs ± 4%  -35.07%  (p=0.000 n=90+94)
GorillaMux_ParamWrite      1.87µs ± 5%    1.43µs ± 8%  -23.51%  (p=0.000 n=95+92)
GorillaMux_GithubStatic    3.77µs ± 5%    2.43µs ± 4%  -35.40%  (p=0.000 n=96+96)
GorillaMux_GithubParam     5.68µs ± 6%    5.21µs ± 5%   -8.32%  (p=0.000 n=93+93)
GorillaMux_GithubAll       2.86ms ± 6%    2.71ms ± 4%   -5.44%  (p=0.000 n=99+96)
GorillaMux_GPlusStatic     1.31µs ± 5%    0.21µs ± 4%  -84.29%  (p=0.000 n=92+95)
GorillaMux_GPlusParam      2.37µs ± 3%    1.96µs ± 2%  -17.42%  (p=0.000 n=96+94)
GorillaMux_GPlus2Params    4.43µs ± 3%    3.90µs ± 3%  -11.89%  (p=0.000 n=91+90)
GorillaMux_GPlusAll        37.1µs ± 6%    28.9µs ± 5%  -22.26%  (p=0.000 n=93+92)
GorillaMux_ParseStatic     1.55µs ± 5%    0.42µs ± 4%  -72.78%  (p=0.000 n=95+91)
GorillaMux_ParseParam      1.88µs ± 7%    1.41µs ± 7%  -24.66%  (p=0.000 n=94+93)
GorillaMux_Parse2Params    2.21µs ± 4%    1.74µs ± 6%  -21.16%  (p=0.000 n=94+96)
GorillaMux_ParseAll        71.8µs ± 4%    51.3µs ± 4%  -28.51%  (p=0.000 n=93+94)
GorillaMux_StaticAll        771µs ± 4%     492µs ± 3%  -36.17%  (p=0.000 n=95+90)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.93kB ± 0%  -32.56%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.10kB ± 0%  -39.86%  (p=0.000 n=100+80)
GorillaMux_ParamWrite      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     149kB ± 0%  -42.37%  (p=0.000 n=86+99)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%     9.7kB ± 0%  -41.43%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    14.4kB ± 0%  -53.88%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%       8kB ± 0%  -95.24%  (p=0.000 n=100+100)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       7.0 ± 0%  -41.67%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.21k ± 0%  -39.57%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        79 ± 0%  -38.28%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       122 ± 0%  -51.20%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.16k ± 0%  -88.89%  (p=0.000 n=100+100)
```

Before vs After

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) E-2278G CPU @ 3.40GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           1.86µs ±13%    1.47µs ±11%  -21.05%  (p=0.000 n=94+93)
GorillaMux_Param5          2.61µs ± 4%    2.25µs ± 2%  -13.64%  (p=0.000 n=89+90)
GorillaMux_Param20         6.13µs ± 3%    4.05µs ± 4%  -33.96%  (p=0.000 n=90+91)
GorillaMux_ParamWrite      1.87µs ± 5%    1.47µs ± 4%  -21.03%  (p=0.000 n=95+96)
GorillaMux_GithubStatic    3.77µs ± 5%    3.16µs ± 3%  -16.11%  (p=0.000 n=96+95)
GorillaMux_GithubParam     5.68µs ± 6%    5.31µs ± 6%   -6.57%  (p=0.000 n=93+94)
GorillaMux_GithubAll       2.86ms ± 6%    2.72ms ± 4%   -4.97%  (p=0.000 n=99+95)
GorillaMux_GPlusStatic     1.31µs ± 5%    0.66µs ± 6%  -49.50%  (p=0.000 n=92+95)
GorillaMux_GPlusParam      2.37µs ± 3%    2.04µs ± 4%  -13.87%  (p=0.000 n=96+90)
GorillaMux_GPlus2Params    4.43µs ± 3%    3.98µs ± 5%  -10.21%  (p=0.000 n=91+92)
GorillaMux_GPlusAll        37.1µs ± 6%    30.6µs ± 6%  -17.65%  (p=0.000 n=93+94)
GorillaMux_ParseStatic     1.55µs ± 5%    0.90µs ± 4%  -41.88%  (p=0.000 n=95+91)
GorillaMux_ParseParam      1.88µs ± 7%    1.47µs ± 6%  -21.53%  (p=0.000 n=94+95)
GorillaMux_Parse2Params    2.21µs ± 4%    1.80µs ± 5%  -18.26%  (p=0.000 n=94+90)
GorillaMux_ParseAll        71.8µs ± 4%    57.9µs ± 3%  -19.30%  (p=0.000 n=93+97)
GorillaMux_StaticAll        771µs ± 4%     664µs ± 4%  -13.87%  (p=0.000 n=95+95)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.98kB ± 0%  -29.07%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.14kB ± 0%  -38.48%  (p=0.000 n=100+83)
GorillaMux_ParamWrite      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     173kB ± 0%  -33.02%  (p=0.000 n=86+100)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%    11.1kB ± 0%  -32.82%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    19.6kB ± 0%  -37.02%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%      78kB ± 0%  -50.79%  (p=0.000 n=100+100)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       8.0 ± 0%  -33.33%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.48k ± 0%  -25.78%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        96 ± 0%  -25.00%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       168 ± 0%  -32.80%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.63k ± 0%  -55.56%  (p=0.000 n=100+100)
```

---

</details>


<details>
<summary> Older Xeon Gold, 2.3 GHz </summary>

Before vs After with omit Route flag enabled

(Actual CPU identifier is rather `Intel(R) Xeon(R) Gold 5122 CPU @ 2.30GHz`)
```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel Xeon Processor (Skylake, IBRS)

name                     old time/op    new time/op    delta
GorillaMux_Param           3.02µs ±14%    2.24µs ±12%  -25.60%  (p=0.000 n=100+99)
GorillaMux_Param5          4.20µs ±12%    3.45µs ±10%  -17.84%  (p=0.000 n=95+97)
GorillaMux_Param20         9.86µs ±12%    6.36µs ± 9%  -35.54%  (p=0.000 n=96+93)
GorillaMux_ParamWrite      2.97µs ± 7%    2.21µs ± 5%  -25.40%  (p=0.000 n=96+96)
GorillaMux_GithubStatic    5.82µs ± 6%    3.62µs ± 5%  -37.87%  (p=0.000 n=99+98)
GorillaMux_GithubParam     8.81µs ± 7%    7.90µs ± 5%  -10.37%  (p=0.000 n=97+95)
GorillaMux_GithubAll       3.93ms ± 4%    3.62ms ± 6%   -7.72%  (p=0.000 n=97+99)
GorillaMux_GPlusStatic     2.04µs ± 7%    0.33µs ± 9%  -83.77%  (p=0.000 n=98+99)
GorillaMux_GPlusParam      3.72µs ± 6%    3.14µs ±13%  -15.44%  (p=0.000 n=99+99)
GorillaMux_GPlus2Params    6.89µs ± 8%    6.57µs ± 9%   -4.70%  (p=0.000 n=92+98)
GorillaMux_GPlusAll        56.1µs ± 6%    46.5µs ±11%  -17.14%  (p=0.000 n=95+98)
GorillaMux_ParseStatic     2.43µs ± 6%    0.67µs ±11%  -72.49%  (p=0.000 n=96+99)
GorillaMux_ParseParam      2.91µs ± 8%    2.29µs ±12%  -21.07%  (p=0.000 n=98+97)
GorillaMux_Parse2Params    3.44µs ± 8%    2.84µs ± 8%  -17.53%  (p=0.000 n=98+95)
GorillaMux_ParseAll         111µs ± 5%      80µs ±11%  -27.91%  (p=0.000 n=96+98)
GorillaMux_StaticAll       1.13ms ± 4%    0.71ms ± 5%  -37.32%  (p=0.000 n=97+97)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.93kB ± 0%  -32.56%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.10kB ± 0%  -39.86%  (p=0.000 n=100+79)
GorillaMux_ParamWrite      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     149kB ± 0%  -42.37%  (p=0.000 n=80+96)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%     9.7kB ± 0%  -41.43%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    14.4kB ± 0%  -53.88%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%       8kB ± 0%  -95.24%  (p=0.000 n=100+100)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       7.0 ± 0%  -41.67%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.21k ± 0%  -39.57%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        79 ± 0%  -38.28%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       122 ± 0%  -51.20%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.16k ± 0%  -88.89%  (p=0.000 n=100+100)
```

Before vs After

(Actual CPU identifier is rather `Intel(R) Xeon(R) Gold 5122 CPU @ 2.30GHz`)
```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel Xeon Processor (Skylake, IBRS) 

name                     old time/op    new time/op    delta
GorillaMux_Param           3.02µs ±14%    2.27µs ± 8%  -24.70%  (p=0.000 n=100+98)
GorillaMux_Param5          4.20µs ±12%    3.48µs ± 5%  -17.29%  (p=0.000 n=95+98)
GorillaMux_Param20         9.86µs ±12%    6.41µs ± 6%  -35.05%  (p=0.000 n=96+92)
GorillaMux_ParamWrite      2.97µs ± 7%    2.31µs ± 6%  -22.12%  (p=0.000 n=96+98)
GorillaMux_GithubStatic    5.82µs ± 6%    4.69µs ± 5%  -19.52%  (p=0.000 n=99+96)
GorillaMux_GithubParam     8.81µs ± 7%    7.98µs ± 4%   -9.48%  (p=0.000 n=97+96)
GorillaMux_GithubAll       3.93ms ± 4%    3.64ms ± 5%   -7.18%  (p=0.000 n=97+94)
GorillaMux_GPlusStatic     2.04µs ± 7%    1.05µs ±12%  -48.53%  (p=0.000 n=98+94)
GorillaMux_GPlusParam      3.72µs ± 6%    3.09µs ± 5%  -16.76%  (p=0.000 n=99+96)
GorillaMux_GPlus2Params    6.89µs ± 8%    6.18µs ± 5%  -10.28%  (p=0.000 n=92+95)
GorillaMux_GPlusAll        56.1µs ± 6%    46.0µs ± 5%  -17.98%  (p=0.000 n=95+93)
GorillaMux_ParseStatic     2.43µs ± 6%    1.44µs ± 5%  -40.52%  (p=0.000 n=96+95)
GorillaMux_ParseParam      2.91µs ± 8%    2.30µs ± 5%  -20.93%  (p=0.000 n=98+98)
GorillaMux_Parse2Params    3.44µs ± 8%    2.82µs ± 7%  -18.04%  (p=0.000 n=98+94)
GorillaMux_ParseAll         111µs ± 5%      91µs ±13%  -18.12%  (p=0.000 n=96+98)
GorillaMux_StaticAll       1.13ms ± 4%    0.95ms ± 9%  -16.38%  (p=0.000 n=97+96)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.98kB ± 0%  -29.07%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.14kB ± 0%  -38.49%  (p=0.000 n=100+100)
GorillaMux_ParamWrite      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     173kB ± 0%  -33.02%  (p=0.000 n=80+100)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%    11.1kB ± 0%  -32.82%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    19.6kB ± 0%  -37.02%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%      78kB ± 0%  -50.79%  (p=0.000 n=100+95)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       8.0 ± 0%  -33.33%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.48k ± 0%  -25.78%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        96 ± 0%  -25.00%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       168 ± 0%  -32.80%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.63k ± 0%  -55.56%  (p=0.000 n=100+100)
```

---

</details>



<details>
<summary> Older Xeon E, 2.4 GHz </summary>

Before vs After with omit Route flag enabled

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           3.31µs ±11%    2.44µs ±11%  -26.34%  (p=0.000 n=95+92)
GorillaMux_Param5          4.68µs ± 9%    3.96µs ±14%  -15.22%  (p=0.000 n=97+100)
GorillaMux_Param20         11.1µs ±10%     7.2µs ± 9%  -35.03%  (p=0.000 n=100+97)
GorillaMux_ParamWrite      3.37µs ±10%    2.56µs ± 8%  -24.21%  (p=0.000 n=95+94)
GorillaMux_GithubStatic    6.90µs ± 7%    3.85µs ± 8%  -44.16%  (p=0.000 n=96+91)
GorillaMux_GithubParam     9.85µs ± 6%    8.89µs ±11%   -9.74%  (p=0.000 n=98+96)
GorillaMux_GithubAll       5.15ms ±10%    4.77ms ± 7%   -7.36%  (p=0.000 n=96+96)
GorillaMux_GPlusStatic     2.38µs ± 8%    0.36µs ± 7%  -84.98%  (p=0.000 n=95+94)
GorillaMux_GPlusParam      4.30µs ±11%    3.33µs ±10%  -22.60%  (p=0.000 n=97+95)
GorillaMux_GPlus2Params    7.80µs ± 8%    6.82µs ±10%  -12.55%  (p=0.000 n=98+94)
GorillaMux_GPlusAll        65.8µs ±10%    50.5µs ±10%  -23.24%  (p=0.000 n=97+98)
GorillaMux_ParseStatic     2.98µs ±10%    0.70µs ± 9%  -76.68%  (p=0.000 n=99+94)
GorillaMux_ParseParam      3.31µs ± 9%    2.55µs ± 9%  -23.11%  (p=0.000 n=96+95)
GorillaMux_Parse2Params    3.92µs ± 8%    3.18µs ±12%  -18.86%  (p=0.000 n=97+96)
GorillaMux_ParseAll         125µs ± 9%      90µs ±12%  -28.23%  (p=0.000 n=99+96)
GorillaMux_StaticAll       1.32ms ± 6%    0.79ms ± 6%  -40.41%  (p=0.000 n=99+95)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.93kB ± 0%  -32.56%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.10kB ± 0%  -39.86%  (p=0.000 n=100+79)
GorillaMux_ParamWrite      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     149kB ± 0%  -42.37%  (p=0.000 n=79+86)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%     9.7kB ± 0%  -41.43%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    14.4kB ± 0%  -53.88%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%       8kB ± 0%  -95.24%  (p=0.000 n=100+100)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       7.0 ± 0%  -41.67%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.21k ± 0%  -39.57%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        79 ± 0%  -38.28%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       122 ± 0%  -51.20%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.16k ± 0%  -88.89%  (p=0.000 n=100+100)
```

Before vs After

```
goos: linux
goarch: amd64
pkg: github.com/gorilla/mux
cpu: Intel(R) Xeon(R) CPU E5-2680 v4 @ 2.40GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           3.31µs ±11%    2.59µs ±12%  -21.76%  (p=0.000 n=95+96)
GorillaMux_Param5          4.68µs ± 9%    3.80µs ± 7%  -18.79%  (p=0.000 n=97+92)
GorillaMux_Param20         11.1µs ±10%     7.2µs ± 9%  -35.19%  (p=0.000 n=100+99)
GorillaMux_ParamWrite      3.37µs ±10%    2.68µs ± 7%  -20.69%  (p=0.000 n=95+95)
GorillaMux_GithubStatic    6.90µs ± 7%    5.06µs ± 7%  -26.57%  (p=0.000 n=96+91)
GorillaMux_GithubParam     9.85µs ± 6%    8.83µs ± 9%  -10.42%  (p=0.000 n=98+98)
GorillaMux_GithubAll       5.15ms ±10%    4.71ms ± 9%   -8.50%  (p=0.000 n=96+97)
GorillaMux_GPlusStatic     2.38µs ± 8%    1.19µs ±10%  -50.24%  (p=0.000 n=95+100)
GorillaMux_GPlusParam      4.30µs ±11%    3.40µs ± 5%  -21.08%  (p=0.000 n=97+96)
GorillaMux_GPlus2Params    7.80µs ± 8%    6.96µs ± 8%  -10.71%  (p=0.000 n=98+98)
GorillaMux_GPlusAll        65.8µs ±10%    52.2µs ±10%  -20.65%  (p=0.000 n=97+96)
GorillaMux_ParseStatic     2.98µs ±10%    1.61µs ±10%  -46.04%  (p=0.000 n=99+100)
GorillaMux_ParseParam      3.31µs ± 9%    2.63µs ± 7%  -20.46%  (p=0.000 n=96+91)
GorillaMux_Parse2Params    3.92µs ± 8%    3.23µs ± 6%  -17.58%  (p=0.000 n=97+93)
GorillaMux_ParseAll         125µs ± 9%     102µs ± 9%  -18.79%  (p=0.000 n=99+96)
GorillaMux_StaticAll       1.32ms ± 6%    1.07ms ± 7%  -18.78%  (p=0.000 n=99+95)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Param5          1.38kB ± 0%    0.98kB ± 0%  -29.07%  (p=0.000 n=100+100)
GorillaMux_Param20         3.48kB ± 0%    2.14kB ± 0%  -38.49%  (p=0.000 n=100+100)
GorillaMux_ParamWrite      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GithubStatic    1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GithubParam     1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GithubAll        258kB ± 0%     173kB ± 0%  -33.02%  (p=0.000 n=79+96)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_GPlusParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_GPlusAll        16.5kB ± 0%    11.1kB ± 0%  -32.82%  (p=0.000 n=100+100)
GorillaMux_ParseStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=100+100)
GorillaMux_ParseParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=100+100)
GorillaMux_Parse2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=100+100)
GorillaMux_ParseAll        31.1kB ± 0%    19.6kB ± 0%  -37.02%  (p=0.000 n=100+100)
GorillaMux_StaticAll        158kB ± 0%      78kB ± 0%  -50.79%  (p=0.000 n=100+100)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param5            10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Param20           12.0 ± 0%       8.0 ± 0%  -33.33%  (p=0.000 n=100+100)
GorillaMux_ParamWrite        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubStatic      9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GithubParam       10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GithubAll        1.99k ± 0%     1.48k ± 0%  -25.78%  (p=0.000 n=100+100)
GorillaMux_GPlusStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_GPlusParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlus2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_GPlusAll           128 ± 0%        96 ± 0%  -25.00%  (p=0.000 n=100+100)
GorillaMux_ParseStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=100+100)
GorillaMux_ParseParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_Parse2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=100+100)
GorillaMux_ParseAll           250 ± 0%       168 ± 0%  -32.80%  (p=0.000 n=100+100)
GorillaMux_StaticAll        1.41k ± 0%     0.63k ± 0%  -55.56%  (p=0.000 n=100+100)
```

---

</details>


<details>
<summary> Older i7, frequency scaling around 3.4 GHz, n=10 </summary>

Sorry, only 10 iterations each. I do not want to hear the fan for too long :)

Before vs After with omit Route flag enabled

```
goos: linux
goarch: amd64
pkg: github.com/julienschmidt/go-http-routing-benchmark
cpu: Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           1.80µs ± 2%    1.41µs ± 3%  -21.64%  (p=0.000 n=10+10)
GorillaMux_Param5          2.68µs ± 0%    2.34µs ± 1%  -12.43%  (p=0.000 n=10+10)
GorillaMux_Param20         5.92µs ± 0%    4.02µs ± 0%  -32.10%  (p=0.000 n=10+9)
GorillaMux_ParamWrite      1.89µs ± 1%    1.47µs ± 0%  -22.22%  (p=0.000 n=9+8)
GorillaMux_GithubStatic    4.05µs ± 1%    2.80µs ± 0%  -31.04%  (p=0.000 n=9+10)
GorillaMux_GithubParam     6.30µs ± 1%    5.90µs ± 1%   -6.27%  (p=0.000 n=10+10)
GorillaMux_GithubAll       3.14ms ± 1%    2.87ms ± 2%   -8.42%  (p=0.000 n=10+10)
GorillaMux_GPlusStatic     1.29µs ± 1%    0.23µs ± 1%  -82.37%  (p=0.000 n=10+10)
GorillaMux_GPlusParam      2.52µs ± 0%    2.07µs ± 1%  -17.69%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params    4.92µs ± 0%    4.49µs ± 1%   -8.71%  (p=0.000 n=10+10)
GorillaMux_GPlusAll        39.0µs ± 1%    31.5µs ± 1%  -19.28%  (p=0.000 n=10+10)
GorillaMux_ParseStatic     1.58µs ± 1%    0.47µs ± 1%  -70.01%  (p=0.000 n=10+10)
GorillaMux_ParseParam      1.89µs ± 0%    1.46µs ± 1%  -22.70%  (p=0.000 n=10+10)
GorillaMux_Parse2Params    2.31µs ± 2%    1.87µs ± 0%  -18.96%  (p=0.000 n=10+8)
GorillaMux_ParseAll        74.3µs ± 1%    55.4µs ± 0%  -25.48%  (p=0.000 n=10+10)
GorillaMux_StaticAll        797µs ± 0%     561µs ± 1%  -29.66%  (p=0.000 n=10+10)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=10+10)
GorillaMux_Param5          1.38kB ± 0%    0.93kB ± 0%  -32.56%  (p=0.000 n=10+10)
GorillaMux_Param20         3.48kB ± 0%    2.09kB ± 0%  -39.87%  (p=0.000 n=10+10)
GorillaMux_ParamWrite      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=10+10)
GorillaMux_GithubStatic    1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=10+10)
GorillaMux_GithubParam     1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=10+10)
GorillaMux_GithubAll        258kB ± 0%     149kB ± 0%  -42.37%  (p=0.000 n=10+9)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=10+10)
GorillaMux_GPlusParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=10+10)
GorillaMux_GPlusAll        16.5kB ± 0%     9.7kB ± 0%  -41.43%  (p=0.000 n=10+10)
GorillaMux_ParseStatic     1.01kB ± 0%    0.05kB ± 0%  -95.24%  (p=0.000 n=10+10)
GorillaMux_ParseParam      1.31kB ± 0%    0.86kB ± 0%  -34.15%  (p=0.000 n=10+10)
GorillaMux_Parse2Params    1.33kB ± 0%    0.88kB ± 0%  -33.73%  (p=0.000 n=10+10)
GorillaMux_ParseAll        31.1kB ± 0%    14.4kB ± 0%  -53.88%  (p=0.000 n=10+10)
GorillaMux_StaticAll        158kB ± 0%       8kB ± 0%  -95.24%  (p=0.000 n=10+10)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_Param5            10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_Param20           12.0 ± 0%       7.0 ± 0%  -41.67%  (p=0.000 n=10+10)
GorillaMux_ParamWrite        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_GithubStatic      9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=10+10)
GorillaMux_GithubParam       10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_GithubAll        1.99k ± 0%     1.21k ± 0%  -39.57%  (p=0.000 n=10+10)
GorillaMux_GPlusStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=10+10)
GorillaMux_GPlusParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_GPlusAll           128 ± 0%        79 ± 0%  -38.28%  (p=0.000 n=10+10)
GorillaMux_ParseStatic       9.00 ± 0%      1.00 ± 0%  -88.89%  (p=0.000 n=10+10)
GorillaMux_ParseParam        10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_Parse2Params      10.0 ± 0%       7.0 ± 0%  -30.00%  (p=0.000 n=10+10)
GorillaMux_ParseAll           250 ± 0%       122 ± 0%  -51.20%  (p=0.000 n=10+10)
GorillaMux_StaticAll        1.41k ± 0%     0.16k ± 0%  -88.89%  (p=0.000 n=10+10)
```

Before vs After
```
goos: linux
goarch: amd64
pkg: github.com/julienschmidt/go-http-routing-benchmark
cpu: Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz

name                     old time/op    new time/op    delta
GorillaMux_Param           1.80µs ± 2%    1.38µs ± 2%  -23.29%  (p=0.000 n=10+10)
GorillaMux_Param5          2.68µs ± 0%    2.29µs ± 1%  -14.51%  (p=0.000 n=10+10)
GorillaMux_Param20         5.92µs ± 0%    3.95µs ± 1%  -33.32%  (p=0.000 n=10+10)
GorillaMux_ParamWrite      1.89µs ± 1%    1.46µs ± 2%  -22.59%  (p=0.000 n=9+10)
GorillaMux_GithubStatic    4.05µs ± 1%    3.41µs ± 1%  -15.89%  (p=0.000 n=9+9)
GorillaMux_GithubParam     6.30µs ± 1%    5.80µs ± 1%   -7.91%  (p=0.000 n=10+10)
GorillaMux_GithubAll       3.14ms ± 1%    2.89ms ± 1%   -7.79%  (p=0.000 n=10+10)
GorillaMux_GPlusStatic     1.29µs ± 1%    0.65µs ± 1%  -49.87%  (p=0.000 n=10+10)
GorillaMux_GPlusParam      2.52µs ± 0%    2.14µs ± 1%  -15.03%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params    4.92µs ± 0%    4.46µs ± 1%   -9.40%  (p=0.000 n=10+10)
GorillaMux_GPlusAll        39.0µs ± 1%    33.0µs ± 1%  -15.53%  (p=0.000 n=10+10)
GorillaMux_ParseStatic     1.58µs ± 1%    0.93µs ± 1%  -41.36%  (p=0.000 n=10+10)
GorillaMux_ParseParam      1.89µs ± 0%    1.51µs ± 2%  -20.23%  (p=0.000 n=10+9)
GorillaMux_Parse2Params    2.31µs ± 2%    1.92µs ± 1%  -16.95%  (p=0.000 n=10+10)
GorillaMux_ParseAll        74.3µs ± 1%    60.9µs ± 1%  -17.99%  (p=0.000 n=10+10)
GorillaMux_StaticAll        797µs ± 0%     699µs ± 0%  -12.25%  (p=0.000 n=10+10)

name                     old alloc/op   new alloc/op   delta
GorillaMux_Param           1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=10+10)
GorillaMux_Param5          1.38kB ± 0%    0.98kB ± 0%  -29.07%  (p=0.000 n=10+10)
GorillaMux_Param20         3.48kB ± 0%    2.14kB ± 0%  -38.48%  (p=0.000 n=10+10)
GorillaMux_ParamWrite      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=10+10)
GorillaMux_GithubStatic    1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=10+10)
GorillaMux_GithubParam     1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=10+10)
GorillaMux_GithubAll        258kB ± 0%     173kB ± 0%  -33.02%  (p=0.000 n=10+10)
GorillaMux_GPlusStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=10+10)
GorillaMux_GPlusParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=10+10)
GorillaMux_GPlusAll        16.5kB ± 0%    11.1kB ± 0%  -32.82%  (p=0.000 n=10+10)
GorillaMux_ParseStatic     1.01kB ± 0%    0.50kB ± 0%  -50.79%  (p=0.000 n=10+10)
GorillaMux_ParseParam      1.31kB ± 0%    0.91kB ± 0%  -30.49%  (p=0.000 n=10+10)
GorillaMux_Parse2Params    1.33kB ± 0%    0.93kB ± 0%  -30.12%  (p=0.000 n=10+10)
GorillaMux_ParseAll        31.1kB ± 0%    19.6kB ± 0%  -37.02%  (p=0.000 n=10+10)
GorillaMux_StaticAll        158kB ± 0%      78kB ± 0%  -50.79%  (p=0.000 n=10+10)

name                     old allocs/op  new allocs/op  delta
GorillaMux_Param             10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_Param5            10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_Param20           12.0 ± 0%       8.0 ± 0%  -33.33%  (p=0.000 n=10+10)
GorillaMux_ParamWrite        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_GithubStatic      9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=10+10)
GorillaMux_GithubParam       10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_GithubAll        1.99k ± 0%     1.48k ± 0%  -25.78%  (p=0.000 n=10+10)
GorillaMux_GPlusStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=10+10)
GorillaMux_GPlusParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_GPlus2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_GPlusAll           128 ± 0%        96 ± 0%  -25.00%  (p=0.000 n=10+10)
GorillaMux_ParseStatic       9.00 ± 0%      4.00 ± 0%  -55.56%  (p=0.000 n=10+10)
GorillaMux_ParseParam        10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_Parse2Params      10.0 ± 0%       8.0 ± 0%  -20.00%  (p=0.000 n=10+10)
GorillaMux_ParseAll           250 ± 0%       168 ± 0%  -32.80%  (p=0.000 n=10+10)
GorillaMux_StaticAll        1.41k ± 0%     0.63k ± 0%  -55.56%  (p=0.000 n=10+10)
```

---

</details>


---

</details>

---

</details>

If you read this far, please consider running benchmarks for your own use cases
 of `mux` and report back any changes. Thanks!

<details>
<summary> go.mod override </summary>

You can use the following override in your `go.mod` file:
```
replace github.com/gorilla/mux v1.8.1 => github.com/das7pad/mux v1.8.1-0.20220803193445-4e593050ec93
```
Optionally, you can enable the flag for not storing the `Route` in the request context:
```
m := mux.NewRouter()
m.OmitRouteFromContext(true)
```
</details>
",perf: cut allocations,2022-08-05 21:45:34+00:00,2023-12-07 04:58:54+00:00,2023-12-07 04:58:53+00:00,2023-12-07 04:58:53+00:00,False
f79c3af9b03521687ad5be6a9d0cf7e9b8207d7d,1581082162,735,closed,"This brings these docs in line with the rest of the repository.

## What type of PR is this? (check all applicable)

- [ ] Refactor
- [ ] Feature
- [ ] Bug Fix
- [ ] Optimization
- [x] Documentation Update
- [ ] Go Version Update
- [ ] Dependency Update

## Description

Remove use of hyphen in ""redirect"" in the documentation.

## Added/updated tests?

- [ ] Yes
- [x] No, and this is why: No regression test required 
- [ ] I need help with writing tests

## Run verifications and test

- [ ] `make verify` is passing
- [x] `make test` is passing

`make verify` is not passing for me locally, but the failures are in unrelated
files. It may be because I don't see a .golangci.yml in the repo. I assume it's
using my linting config instead.
","Use ""redirect"" rather than ""re-direct"" in docs",2023-10-31 14:26:17+00:00,2023-11-13 04:31:50+00:00,2023-11-13 04:31:50+00:00,2023-11-13 04:31:50+00:00,False
