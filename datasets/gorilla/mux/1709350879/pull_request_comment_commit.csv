commit_sha,body,id,created_at,updated_at
910dd3aa3181e73b3605b92f5db7768a460721c1,"Why set this to ""application/json"", or anything at all? It doesn't really contribute anything to the example.
",81461009,2016-10-02 00:29:29+00:00,2016-10-03 22:31:07+00:00
910dd3aa3181e73b3605b92f5db7768a460721c1,"Good point.  I'll fix that. :)
",81653948,2016-10-03 22:30:08+00:00,2016-10-03 22:31:07+00:00
12a13f34e4fd6f7c8cbd499c446bded8d09ad8ad,"We should still add `SkipClean()` as a method on `*Route` as well.
",55364376,2016-03-08 14:21:54+00:00,2016-05-02 17:30:29+00:00
12a13f34e4fd6f7c8cbd499c446bded8d09ad8ad,"`SkipClean defines the path cleaning behaviour for new routes. The initial value is false. Users should be careful about which routes are not cleaned`.
",55364514,2016-03-08 14:22:42+00:00,2016-05-02 17:30:29+00:00
f7ac7251e3b615c63207d481413aab0726812499,"Can you expand on this? What is this useful for?
",54356354,2016-02-28 21:06:46+00:00,2016-02-29 15:54:21+00:00
f7ac7251e3b615c63207d481413aab0726812499,"``` go
// GetPathTemplate returns the template used to build the
// route match.
```
",54366057,2016-02-29 03:21:55+00:00,2016-02-29 15:54:21+00:00
f7ac7251e3b615c63207d481413aab0726812499,"``` go
// This is useful for building simple REST API documentation and for instrumentation
// against third-party services.
// An error will be returned if the route does not define a path.
```
",54366102,2016-02-29 03:23:14+00:00,2016-02-29 15:54:21+00:00
f7ac7251e3b615c63207d481413aab0726812499,"Need its own godoc string.

``` go
// GetHostTemplate returns the template used to build the
// route match.
// An error will be returned if the route does not define a host.
```
",54366188,2016-02-29 03:25:55+00:00,2016-02-29 15:54:21+00:00
82a9c170d40582ee65ff8af081485e5e325fb4a0,"I can remove the self reference if desired.  Just figured I would have a little fun with the test. :wink: 
",48445477,2015-12-26 07:24:36+00:00,2015-12-26 07:25:22+00:00
82a9c170d40582ee65ff8af081485e5e325fb4a0,"Totally fine by me :+1: 
",48523433,2015-12-29 06:31:07+00:00,2015-12-29 06:31:07+00:00
82a9c170d40582ee65ff8af081485e5e325fb4a0,"Does it really make sense to report this as a match?
http://play.golang.org/p/SIL-WWftyQ
Seems confusing when request didn't match any real route but `router.Match` reports `true`.

FWIW I got a panic in my stats collection code which assumed that if `router.Match(...) == true`, returned `RouteMatch` would have a non-nil `Route`.
",48791689,2016-01-04 22:37:12+00:00,2016-01-04 22:37:12+00:00
82a9c170d40582ee65ff8af081485e5e325fb4a0,"If we don't report it as a match we would need to re-engineer how sub-router 404 handling works (e.g. revert this).

The alternative would be to set `match.Handler == nil` and then add another field to `Router` to handle this behaviour.
",49149254,2016-01-08 01:17:26+00:00,2016-01-08 01:17:26+00:00
82a9c170d40582ee65ff8af081485e5e325fb4a0,"Or add a flag to `RouteMatch` that says ""this is a not-found handler, not an actual route match"".
Or add a non-exported `matchHandler()` that does the regular `Match` behavior or returns `NotFoundHandler` if it's set.
I did not dig into the implementation of this package enough to come up with an actual valid suggestion, simply complaining :)

It basically feels like this is mixing up internal implementation details and exported API in a way that makes exported API unintuitive.
",49229138,2016-01-08 19:42:44+00:00,2016-01-08 19:43:06+00:00
9a9f155278d9b29c53acbb38c89b3024f658b55d,"I assume any output from the diff will cause the test to fail?
",44236334,2015-11-09 02:14:49+00:00,2015-11-09 02:14:49+00:00
9a9f155278d9b29c53acbb38c89b3024f658b55d,"That's correct.

From man pages on `diff`:

> Exit status is 0 if inputs are the same, 1 if different, 2 if trouble.

So `diff` is used precisely to cause Travis to fail if there's a non-zero `gofmt -d` output. Just running `gofmt -d` by itself has 0 exit status and wouldn't cause Travis to fail.
",44236725,2015-11-09 02:28:27+00:00,2015-11-09 02:28:27+00:00
13c8226081008f7ade9c619da744ed14e78eb8de,"Change the wording a bit. Remove ""Note:"" and instead of ""it uses context.Get()"" say:

""the matched route is stored in the request context which is cleared after the handler returns, unless the `KeepContext` option is set on the Router.`
",36278702,2015-08-05 08:17:14+00:00,2015-08-05 08:24:44+00:00
13c8226081008f7ade9c619da744ed14e78eb8de,"Done
",36279235,2015-08-05 08:25:25+00:00,2015-08-05 08:25:25+00:00
98fb535d771e43021d337c156c78ab13d1a7f506,"I think this should check the error and panic. `regex` will be nil in the error case and the developer will get a panic when the mux tries to match, but it will be hard to trace down the root cause.

If this panics with a message, something like ""invalid regular expression: %s"" it will be obvious they made a mistake when setting up the routes in the first place.
",33897241,2015-07-05 18:12:30+00:00,2015-07-19 08:56:47+00:00
98fb535d771e43021d337c156c78ab13d1a7f506,"I guess you can just return the error, that will be more in line with the rest of the package's error handling (which badly needs an overhaul, ugh)
",33897257,2015-07-05 18:14:54+00:00,2015-07-19 08:56:47+00:00
98fb535d771e43021d337c156c78ab13d1a7f506,"Yea sounds great. Thanks for the code review, really appreciate :) Will fix this up tomorrow afternoon
",33928042,2015-07-06 12:20:30+00:00,2015-07-19 08:56:47+00:00
3339267a853e3a855d6e415b96d6f3447b60a824,"This is the test that should cover #109.  
",34876870,2015-07-17 09:58:15+00:00,2015-07-17 09:58:15+00:00
3339267a853e3a855d6e415b96d6f3447b60a824,"use `SplitN` here with a max of 2
",34897254,2015-07-17 15:00:11+00:00,2015-07-17 15:00:11+00:00
3339267a853e3a855d6e415b96d6f3447b60a824,"I just did this quickly :)
",34897601,2015-07-17 15:03:35+00:00,2015-07-17 15:03:35+00:00
0c9d5c08c1d6103f2ced11750a195fc94902d3fc,"I don't like the idea of compiling a regexp during every match attempt, that's going to hurt performance a lot.
",33897295,2015-07-05 18:20:25+00:00,2015-07-05 22:04:01+00:00
451fd8b7796015afbe01cfe9168e4c51e8b40013,"using Sprintf here is probably overkill... how about just `pairs[i] + ""="" + pairs[i+1]`
",13087990,2014-05-27 16:49:43+00:00,2014-05-27 23:37:37+00:00
451fd8b7796015afbe01cfe9168e4c51e8b40013,"This check is redundant. Just use append every time: http://play.golang.org/p/hjQzZ0IGXn
",13088059,2014-05-27 16:51:11+00:00,2014-05-27 23:37:37+00:00
451fd8b7796015afbe01cfe9168e4c51e8b40013,"you can actually skip this check entirely. Just leave the `for _, q := range v.queries` loop below. It works with nil and 0-length slices. That will remove an indent level and make this code easier to grok.
",13108912,2014-05-27 23:28:46+00:00,2014-05-27 23:37:37+00:00
451fd8b7796015afbe01cfe9168e4c51e8b40013,"Similarly you can skip this check here and just leave the range loop.
",13108932,2014-05-27 23:29:15+00:00,2014-05-27 23:37:37+00:00
0a0d6a1b2a0c75b931495697ce6a2182f810ffb3,"I think we could use a test case or two here with query regexp matches.
",13058451,2014-05-26 22:57:40+00:00,2014-05-27 03:20:25+00:00
ab8ae247f17a9f1bbe9bda321aa6719600eb4775,"Please use example.com as the domain.
",7732930,2013-11-18 18:12:30+00:00,2013-11-18 18:53:23+00:00
